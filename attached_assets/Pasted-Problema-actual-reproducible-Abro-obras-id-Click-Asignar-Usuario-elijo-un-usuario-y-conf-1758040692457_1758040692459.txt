Problema actual (reproducible):

Abro /obras/<id>.

Click “Asignar Usuario”, elijo un usuario y confirmo.

Sale banner “1 usuarios ya estaban asignados”, pero en “Equipo Asignado” no aparece nadie.

En “Agregar Tarea”, el campo Responsable no lista usuarios (debería listar los miembros de la obra).

En el modal “Asignar Usuarios a Tareas”, el campo de usuarios está vacío / no asigna.

Lo que necesito que dejen estable ya (Hotfix + Fix):

1) Asignar usuario a obra

DB/Modelo

Tabla: obra_miembros con columna usuario_id (no user_id).

Verificar/migrar:

-- si existe user_id, renombrar
ALTER TABLE obra_miembros RENAME COLUMN user_id TO usuario_id;

-- unique por obra+usuario
ALTER TABLE obra_miembros
  ADD CONSTRAINT uq_obra_usuario UNIQUE (obra_id, usuario_id);


Modelo ObraMiembro:

class ObraMiembro(db.Model):
    __tablename__ = 'obra_miembros'
    id = db.Column(db.Integer, primary_key=True)
    obra_id = db.Column(db.Integer, db.ForeignKey('obras.id'), nullable=False)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuarios.id'), nullable=False)
    rol_en_obra = db.Column(db.String(30))
    etapa_id = db.Column(db.Integer)
    created_at = db.Column(db.DateTime, server_default=db.func.now())
    usuario = db.relationship('Usuario', lazy='joined')


Endpoint

POST /obras/<obra_id>/asignar_usuario

Debe aceptar user_ids[] y fallback a usuario_id (si viene uno solo).

Insertar con ON CONFLICT DO NOTHING.

Responder:

{ "ok": true, "creados": N, "ya_existian": M }


Si no hay usuarios → 400 con {ok:false, error:"Seleccione al menos un usuario"}.

Vista y template del detalle

En el GET del detalle, cargar miembros:

miembros = (db.session.query(ObraMiembro)
            .filter_by(obra_id=obra.id)
            .join(Usuario, Usuario.id == ObraMiembro.usuario_id)
            .all())
return render_template('obras/detalle.html', obra=obra, miembros=miembros, ...)


En el HTML de Equipo Asignado, usar miembros (no asignaciones u otro nombre desfasado).

Hotfix de envío (sin depender de JS)

En el modal, asegurar un <form method="POST" action="{{ url_for('obras.asignar_usuario', obra_id=obra.id) }}">

El botón “Asignar” debe ser type="submit".

Quitar temporalmente cualquier preventDefault() (si hay JS roto) para que el POST tradicional funcione YA y al volver, renderice al usuario en “Equipo Asignado”.

Luego (opcional) dejar el AJAX:

Interceptar submit, armar FormData con user_ids[], hacer fetch, y en éxito window.location.reload().

QA esperado:

En Network se ve POST /obras/<id>/asignar_usuario con user_ids[].

Respuesta {"ok":true,"creados":1,"ya_existian":0}.

El usuario aparece en “Equipo Asignado”.

Si repito con el mismo usuario → {"ok":true,"creados":0,"ya_existian":1}.

2) Responsable en “Agregar Tarea”

El select Responsable debe listar los miembros de la obra (obra_miembros), no todos los usuarios.

Pasar miembros a la plantilla y poblar ese <select> con miembros (usar miembro.usuario.nombre y miembro.usuario_id).

3) Modal “Asignar Usuarios a Tareas” (lo que hoy no asigna)

Tabla: tarea_miembros (o tarea_responsables) con:

tarea_id INT, usuario_id INT, cuota_objetivo DECIMAL NULL

Unique: (tarea_id, usuario_id)

ALTER TABLE tarea_miembros
  ADD CONSTRAINT uq_tarea_usuario UNIQUE (tarea_id, usuario_id);


Endpoint (nuevo):

POST /obras/<obra_id>/tareas/asignar_usuarios

Recibe: task_ids[], user_ids[], cuota_objetivo (opcional)

Inserta todas las combinaciones (tarea_id, usuario_id) con ON CONFLICT DO NOTHING

Responde {ok:true, creados:X, ya_existian:Y} o 400 si faltan arrays.

Front:

Cada tarea seleccionable con .tarea-check + data-tarea-id.

Select múltiple para user_ids[].

JS: en submit, armar FormData con task_ids[] y user_ids[], enviar al endpoint y recargar al terminar.

QA esperado:

Aparece POST /obras/<id>/tareas/asignar_usuarios con ambos arrays.

Respuesta con contadores.

Los usuarios quedan visibles como asignados en cada tarea (o al menos quedan en DB).

4) (Para después) Wizard Etapa → Tareas → Datos

Paso 1: elegir etapa

Paso 2: tildar tareas sugeridas

Paso 3: por cada tarea: inicio/fin, unidad, horas, responsable (miembro de obra), cuota

Guardar todo en un POST que cree tareas + responsables.

Check rápido para ustedes (DB)

¿Existen filas en obra_miembros tras asignar?

SELECT * FROM obra_miembros WHERE obra_id = <ID>;


Si hay filas y el front sigue vacío → la vista no está pasando miembros o el template usa otra variable.

Criterios de aceptación

Asignar usuario a la obra → se ve en “Equipo Asignado”.

“Responsable” en Agregar Tarea muestra solo miembros de la obra.

“Asignar Usuarios a Tareas” asigna y devuelve {ok:true, creados:…}; recarga y se reflejan.

En Network siempre aparecen los POST esperados con FormData correcto.