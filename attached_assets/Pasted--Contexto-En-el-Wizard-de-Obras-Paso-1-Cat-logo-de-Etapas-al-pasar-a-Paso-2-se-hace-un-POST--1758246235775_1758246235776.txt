📌 Contexto

En el Wizard de Obras – Paso 1 (Catálogo de Etapas), al pasar a Paso 2 se hace un POST a /obras/api/wizard-tareas/preview. Ese POST está yendo con etapa_ids: [] y vuelve 400 “etapa_ids requeridos”.

❗ Qué pasa hoy

La UI muestra checkboxes en cada card de etapa.

El contador de “N etapas seleccionadas” se actualiza, pero el payload del POST sale vacío.

En consola aparece que getSelectedEtapaIds no existe y/o el selector del collector no encuentra nada.

Hay desajuste de clases: los checkboxes renderizan como etapa-checkbox, pero el collector busca etapa-check.

🧩 Causa técnica

El código que arma etapa_ids:

No encuentra los elementos (porque busca una clase distinta).

No está expuesto globalmente (no existe window.getSelectedEtapaIds).

El handler “Agregar/Siguiente” en Paso 1 no usa un collector único y por eso arma el POST con un array vacío.

✅ Lo que necesitamos que cambies

Unificar el markup de los checkboxes de Paso 1:

Cada checkbox debe tener una clase estable (podés usar etapa-check o mantener etapa-checkbox, pero que sea una sola y consistente).

Debe traer el ID de la etapa (en value o en data-etapa-id).

Importante: el collector debe buscar exactamente la clase que se renderiza.

Collector canónico (una sola fuente de verdad):

Crear una función global getSelectedEtapaIds() (en window) que:

Busque los checkboxes marcados dentro del contenedor del Paso 1.

Extraiga los IDs desde data-etapa-id o value.

Devuelva un array de números.

Ese mismo collector debe usarse para:

Actualizar el contador de seleccionadas.

Armar el payload del POST.

Handler de Paso 1 → Paso 2:

El botón “Agregar Etapas Seleccionadas / Siguiente” debe:

Evitar el submit clásico (asegurar type="button").

Llamar al collector; si devuelve vacío, mostrar mensaje y no continuar.

Hacer el POST JSON a /obras/api/wizard-tareas/preview con { obra_id, etapa_ids }.

Solo si responde OK, navegar a Paso 2.

(Opcional, no bloqueante) Al activar un pane, limpiar aria-hidden en el activo para evitar el warning de accesibilidad.

🗂️ Dónde tocar

templates/obras/detalle.html: render del Paso 1 (markup de los checkboxes) y botones.

static/js/wizard.js (o el JS del wizard): función global getSelectedEtapaIds() y el handler de “Siguiente” de Paso 1.

✅ Criterios de aceptación

Con al menos una etapa tildada, el Network del navegador muestra el POST a /obras/api/wizard-tareas/preview con un JSON que incluye:

obra_id correcto

etapa_ids como array con 1+ IDs numéricos (no vacío).

El modal navega a Paso 2 sin 400.

El contador del Paso 1 coincide con la cantidad de IDs que envía el POST.

No se rompe el resto:

Paso 2 sigue usando plantillas del catálogo (no DB real).

Paso 3 mantiene el placeholder “— Seleccioná —” en “Asignado a”.

Finalizar/Confirmar siguen con event delegation y sin volver a Paso 2.