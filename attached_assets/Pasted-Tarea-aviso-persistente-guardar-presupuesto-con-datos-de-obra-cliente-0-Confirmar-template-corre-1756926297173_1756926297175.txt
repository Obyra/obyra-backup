Tarea: aviso persistente + guardar presupuesto con datos de obra/cliente
0) Confirmar template correcto

En templates/cotizacion/calculadora.html, arriba del H1, agregar:

<!-- TEMPLATE FLAG: cotizacion/calculadora.html v1 -->


Refrescar y confirmar que el flag aparece en el HTML (View Source). Si no aparece, indicar qu√© template est√° usando la vista y aplicar ah√≠ todos los cambios.

1) Aviso ‚Äúvalores aproximados‚Äù (persistente)

En templates/cotizacion/calculadora.html:
Insertar antes del card ‚ÄúMateriales Calculados‚Äù, fuera de lo que se re-renderiza por JS:

<div id="warn-aprox" class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
  ‚ö†Ô∏è Los precios, art√≠culos, materiales y cantidades son <strong>aproximados</strong> y pueden variar seg√∫n mercado, proveedor y condiciones de obra.
  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

<!-- NO reescribir por JS -->
<div id="materiales-card">
  <!-- card/lista de ‚ÄúMateriales Calculados‚Äù -->
  <!-- la tabla debe tener: <tbody id="tbody-materiales"></tbody> -->
</div>


JS: en mostrarResultados() (o equivalente) no reemplazar #materiales-card.
Actualizar solo #tbody-materiales:

function mostrarResultados(data){
  const warn = document.getElementById('warn-aprox');
  if (warn) warn.style.display = ''; // asegurar visible

  const tbody = document.getElementById('tbody-materiales');
  if (!tbody) { console.error('Falta <tbody id="tbody-materiales">'); return; }
  tbody.innerHTML = data.materiales.map(m => `
    <tr>
      <td>${m.nombre}</td>
      <td class="text-end">${m.cantidad_formateada}</td>
      <td>${m.unidad}</td>
    </tr>
  `).join('');
}

2) ‚ÄúGuardar Presupuesto‚Äù con obra/cliente

A. Form en la columna derecha
Envolver la secci√≥n derecha en un <form> real:

<form id="frm-presu" method="POST" action="{{ url_for('presupuestos.guardar') }}">
  <!-- Radios -->
  <div class="mb-2">
    <label class="form-check form-check-inline">
      <input class="form-check-input" type="radio" name="modo_obra" id="obra_existente" value="existente" checked>
      <span class="form-check-label">Usar obra existente</span>
    </label>
    <label class="form-check form-check-inline">
      <input class="form-check-input" type="radio" name="modo_obra" id="obra_nueva" value="nueva">
      <span class="form-check-label">Crear nueva obra</span>
    </label>
  </div>

  <!-- Select obra existente -->
  <div id="block_obra_existente" class="mb-3">
    <select class="form-select" name="obra_id">
      <option value="">Crear nueva obra autom√°ticamente</option>
      {% for o in obras %}
        <option value="{{ o.id }}">{{ o.nombre }}</option>
      {% endfor %}
    </select>
  </div>

  <!-- Form obra nueva -->
  <div id="block_obra_nueva" class="mb-3" style="display:none;">
    <div class="row g-2">
      <div class="col-md-12">
        <label class="form-label">Nombre de la obra *</label>
        <input class="form-control" name="obra_nombre" placeholder="Ej: Edificio Lavalle 123">
      </div>
      <div class="col-md-6"><label class="form-label">Cliente</label><input class="form-control" name="cliente_nombre"></div>
      <div class="col-md-3"><label class="form-label">Email</label><input class="form-control" type="email" name="cliente_email"></div>
      <div class="col-md-3"><label class="form-label">Tel√©fono</label><input class="form-control" name="cliente_telefono"></div>
      <div class="col-md-8"><label class="form-label">Direcci√≥n</label><input class="form-control" name="direccion"></div>
      <div class="col-md-4"><label class="form-label">Ciudad</label><input class="form-control" name="ciudad"></div>
      <div class="col-md-4"><label class="form-label">Provincia</label><input class="form-control" name="provincia"></div>
      <div class="col-md-4"><label class="form-label">Pa√≠s</label><input class="form-control" name="pais" value="Argentina"></div>
      <div class="col-md-4"><label class="form-label">C√≥digo postal</label><input class="form-control" name="codigo_postal"></div>
      <div class="col-md-12"><label class="form-label">Referencia / Notas</label><input class="form-control" name="referencia"></div>
    </div>
  </div>

  <!-- Observaciones -->
  <div class="mb-3">
    <label class="form-label">Observaciones</label>
    <input class="form-control" name="observaciones" placeholder="Observaciones adicionales‚Ä¶">
  </div>

  <!-- Hidden flags/payload -->
  <input type="hidden" name="crear_nueva_obra" id="crear_nueva_obra" value="0">
  <input type="hidden" name="superficie" id="fld_superficie">
  <input type="hidden" name="tipo_construccion" id="fld_tipo">
  <input type="hidden" name="calculo_json" id="fld_json">

  <button id="btn-guardar" class="btn btn-success" type="submit">üíæ Guardar Presupuesto</button>
</form>


B. JS de alternancia + payload antes de enviar
(Colocar al final del template)

(function(){
  const rExist = document.getElementById('obra_existente');
  const rNueva = document.getElementById('obra_nueva');
  const bExist = document.getElementById('block_obra_existente');
  const bNueva = document.getElementById('block_obra_nueva');
  const flag   = document.getElementById('crear_nueva_obra');

  function toggleObra(){
    const nueva = rNueva.checked;
    bNueva.style.display = nueva ? '' : 'none';
    bExist.style.display = nueva ? 'none' : '';
    flag.value = nueva ? '1' : '0';
    const n = document.querySelector('input[name="obra_nombre"]');
    if (n) n.required = nueva;
  }
  rExist.addEventListener('change', toggleObra);
  rNueva.addEventListener('change', toggleObra);
  toggleObra();

  // completar hidden con datos actuales del c√°lculo
  document.getElementById('frm-presu').addEventListener('submit', function(){
    document.getElementById('fld_superficie').value = String(obtenerSuperficieActual()); // usar getter real
    document.getElementById('fld_tipo').value       = String(obtenerTipoConstruccion()); // usar getter real
    document.getElementById('fld_json').value       = JSON.stringify(ultimoCalculo);    // objeto materiales/equipos
  });
})();


Si no existen obtenerSuperficieActual/obtenerTipoConstruccion/ultimoCalculo, exponerlos o tomar valores desde los inputs visibles del formulario.

C. Backend (ya existe /presupuestos/guardar):
Debe aceptar form-urlencoded, crear Obra si crear_nueva_obra=1 o no viene obra_id, luego crear Presupuesto y redirect al detalle.

QA (aceptaci√≥n)

El flag del template se ve (confirmamos archivo correcto).

Aviso de aproximados visible arriba de ‚ÄúMateriales Calculados‚Äù y permanece al recalcular.

‚ÄúUsar obra existente‚Äù muestra select y oculta formulario nuevo.

‚ÄúCrear nueva obra‚Äù muestra formulario, oculta select y exige obra_nombre.

Guardar Presupuesto:

Caso existente: crea presupuesto asociado y redirige al detalle.

Caso nueva: crea obra + presupuesto y redirige al detalle.

Si algo falla, indic√°:

template exacto de la vista,

funci√≥n JS que re-renderiza materiales,

traza del POST a /presupuestos/guardar (payload y status).

T√∫ dijiste:
pero primero el tema del cartel q no sale. Aviso: ESTE PRESUPUESTO ES ESTIMADO* TOMAR COMO REFERENCIA. Y QUE DE EL OK EL CLIENTE, Y AHI CALCULE
ChatGPT Plus
Pens√≥ durante 22s

Dale, vamos 100% a lo del cartel primero. Copi√°/peg√° esto al agente ‚Äîes corto y funciona.

FIX 1 ‚Äî Cartel visible SIEMPRE (y no se borra al recalcular)

Archivo: templates/cotizacion/calculadora.html
Ubicaci√≥n: justo antes del card/lista ‚ÄúMateriales Calculados‚Äù, y fuera del bloque que el JS reemplaza.

<!-- FLAG: calculadora cartel v1 -->
<div id="aviso-estimado" class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
  ‚ö†Ô∏è <strong>ESTE PRESUPUESTO ES ESTIMADO*</strong> Tomar como referencia.
  El c√°lculo final se realizar√° una vez que el cliente d√© su <strong>OK</strong>.
  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

<!-- NO reescribir este wrapper por JS -->
<div id="materiales-card">
  <!-- aqu√≠ va el card ‚ÄúMateriales Calculados‚Äù -->
  <!-- importante: la tabla debe tener <tbody id="tbody-materiales"></tbody> -->
</div>


JS: en mostrarResultados() (o la funci√≥n que pinta la tabla) NO usar innerHTML sobre #materiales-card.
Actualizar solo el tbody:

function mostrarResultados(data){
  // asegurar que el aviso est√©
  const aviso = document.getElementById('aviso-estimado');
  if (aviso) aviso.style.display = ''; // por si alg√∫n estilo lo escondi√≥

  // pintar SOLO el cuerpo de la tabla
  const tbody = document.getElementById('tbody-materiales');
  if (!tbody) { console.error('Falta <tbody id="tbody-materiales">'); return; }
  tbody.innerHTML = data.materiales.map(m => `
    <tr>
      <td>${m.nombre}</td>
      <td class="text-end">${m.cantidad_formateada}</td>
      <td>${m.unidad}</td>
    </tr>
  `).join('');
}


Si hoy est√°n reescribiendo todo el card con innerHTML, migrar a esta estructura con tbody para que el cartel no desaparezca.

FIX 2 ‚Äî ‚ÄúOK del cliente‚Äù antes de calcular

Objetivo: que el bot√≥n Calcular con IA quede deshabilitado hasta que marques el OK.

En el mismo template, encima o al lado del bot√≥n ‚ÄúCalcular con IA‚Äù:

<div class="form-check my-2">
  <input class="form-check-input" type="checkbox" id="chk-ok-cliente">
  <label class="form-check-label" for="chk-ok-cliente">
    El cliente entiende que <strong>el presupuesto es estimado</strong> y da su OK para calcular.
  </label>
</div>


Asegurate que el bot√≥n tenga un ID (si no, ponelo):

<button id="btn-calcular" class="btn btn-primary">üß† Calcular con IA</button>


JS para bloquear/desbloquear:

(function(){
  const btn = document.getElementById('btn-calcular');
  const chk = document.getElementById('chk-ok-cliente');
  if (!btn || !chk) return;

  function sync(){ btn.disabled = !chk.checked; }
  chk.addEventListener('change', sync);
  sync(); // estado inicial: deshabilitado hasta tildar
})();
