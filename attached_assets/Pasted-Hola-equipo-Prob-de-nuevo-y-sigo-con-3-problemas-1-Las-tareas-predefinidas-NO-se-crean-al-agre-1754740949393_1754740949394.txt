Hola, equipo. Probé de nuevo y sigo con 3 problemas:

1) Las tareas predefinidas NO se crean al agregar etapas
Reproducir:
Obra > “Agregar etapas” > elijo “Mampostería” (o cualquier otra) > se crea la etapa, pero al desplegarla no hay tareas; el botón “+ Agregar Tarea” abre modal vacío.

Esperado:
Al crear una etapa, se deben crear automáticamente ~15 tareas según nuestra lista completa (la misma que les pasé y que dicen haber cargado).

Sospecha técnica:

El sistema todavía está leyendo tareas_detalladas.py (las 5 básicas) o nunca llama al seeding.

Falta el hook que dispara la creación de tareas después de crear la etapa.

Pedido de fix:

Unificar fuente de datos → usar solo tareas_predefinidas.py (la lista completa).

En el backend, al crear una etapa, ejecutar el seeding:

Verificar que se llamen las funciones/métodos tipo seed_tareas_para_etapa(etapa_id, nombre_etapa).

Hacerlo idempotente (si existen, no duplicar).

Crear script/management command para backfill de etapas ya existentes (crear tareas faltantes para etapas ya creadas).

Criterio de aceptación:

Crear una obra nueva, agregar “Mampostería” y “Instalaciones Eléctricas”, abrir cada etapa y ver 15 tareas precargadas con sus descripciones.

Refrescar la página y que no se dupliquen.

2) Error al eliminar una etapa
Mensaje arriba de la página:

bash
Copiar
Editar
Error al eliminar etapa: unsupported operand type(s) for +: 'float' and 'decimal.Decimal'
Reproducir:
Obra > en una etapa > ícono de papelera.

Esperado:
La etapa se elimina y se recalculan Progreso/Presupuesto/Costos sin errores.

Causa probable:
En el callback de eliminación recalculan avance o costos mezclando float con Decimal.

Pedido de fix (sugerencia de patch):

Asegurar que todos los importes y porcentajes se manejen como Decimal.

Cuando venga un float, convertirlo así:

python
Copiar
Editar
from decimal import Decimal, ROUND_HALF_UP

def D(x):  # helper
    return x if isinstance(x, Decimal) else Decimal(str(x))

# ejemplo de suma segura
total = D(presupuesto) + D(costo_real)

# si necesitan porcentajes:
porc = (D(ejecutado) / D(total_presupuesto)) * D('100')
porc = porc.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
Revisar funciones invocadas al borrar etapa: p.ej. recalcular_costo_real_obra, recalcular_porcentaje_avance, o similares, para homogeneizar tipos.

Agregar tests rápidos: crear 2 etapas con costos, eliminar 1 y verificar que no rompa y que actualice los totales.

Criterio de aceptación:
Eliminar una etapa no arroja error y actualiza correctamente Progreso y Costo Real.

3) Estado de etapa queda en “Pendiente” sin forma de cambiar
Reproducir:
Al crear cualquier etapa, aparece un badge “Pendiente” y no encuentro control para cambiar a “En curso/Completada”.

Pedido de fix:

Agregar un control (dropdown o botón de estado) en cada etapa con estos estados: Pendiente / En curso / Pausada / Completada.

Si ya existe en backend el campo estado, exponer endpoint y actualizar la UI.

(Opcional) Si todas las tareas de la etapa están al 100%, cambiar estado a “Completada” automáticamente.

Criterio de aceptación:
Puedo cambiar el estado desde la UI y se persiste.

Archivos a revisar (nombres aproximados)
tareas_predefinidas.py (fuente única de la lista completa)

tareas_detalladas.py (asegurarse de no usar este si sólo tenía 5 tareas)

Vista/servicio que crea etapas (ej.: crear_etapa, post /etapas) → llamar seeding

Lógica de recalculo tras eliminar etapa (costo real / avance)

Modelo y endpoints de estado de etapa

Validación final que necesito
Agregar “Mampostería” y ver las 15 tareas automáticamente.

Cambiar estado de “Pendiente” a “En curso”.

Eliminar una etapa sin error de float/Decimal.

Ejecutar backfill para mis etapas existentes (que queden con sus tareas completas).

Quedo atenta. Gracias.

