Objetivo: eliminar el error await is only valid in async functions‚Ä¶ y dejar la navegaci√≥n estable.

1) Quitar await en top-level

Hay un await fuera de funci√≥n en alg√∫n script cl√°sico que carga junto al wizard (la consola lo marca como 18:3715:17). Busc√° y envolv√© todo bloque que use await en una IIFE async o movelo a una funci√≥n async llamada despu√©s del DOMContentLoaded o del shown.bs.modal.

Acci√≥n:

Revisar TODOS los <script> (incluidos inline en templates) relacionados al wizard.

En cualquier init con await en tope de archivo o fuera de async, cambiar de:

// ‚ùå top-level await (rompe)
const data = await fetchJSON(url);
renderEtapas(data);


a:

// ‚úÖ envuelto
(async function initWizardPaso1(){
  try {
    const data = await fetchJSON(url);
    renderEtapas(data);
  } catch (e) {
    showPaso1Error("Error cargando cat√°logo de etapas", e.message || String(e));
  }
})();


No convertir los scripts a type="module".

B√∫squedas √∫tiles:

rg -n "await " static templates | rg -v "async"
rg -n "<script[^>]*>.*await " -U templates

2) Confirmar gotoPaso y mapeo de panes

Ya tenemos polyfill, pero asegurate que cada pane tenga un selector reconocible.

Opciones:

Dar IDs consistentes: #wizard-paso1, #wizard-paso2, #wizard-paso3, #wizard-paso4, o

Agregar data-wz-step="1|2|3|4" en cada .tab-pane.

El polyfill intenta con:
#wizard-pasoX, #pasoX, #wizardPasoX, #wizard-stepX, #stepX y data-wz-step.

3) Mantener lo ya correcto

URLs con helper api() (rutas absolutas).

Paso 2 usando cat√°logo (no DB).

Select ‚ÄúAsignado a‚Äù con placeholder.

Interceptores por event delegation para #wizard-finish y #wizard-confirm (sin clonado).

4) QA a pasar (en navegador)

Consola limpia: no debe aparecer m√°s await is only valid‚Ä¶.

Paso 1 ‚Üí click Siguiente ‚Üí navega a Paso 2 sin pane no encontrado.

Paso 2 ‚Üí tildar 2‚Äì3 plantillas ‚Üí Siguiente ‚Üí en Paso 3 aparecen esas filas y el select ‚ÄúAsignado a‚Äù muestra ‚Äú‚Äî Seleccion√° ‚Äî‚Äù.

Finalizar (Paso 3): ver POST /obras/api/wizard-bulk-create (o ruta equivalente) con {ok:true} y navegar a Paso 4.

Confirmar (Paso 4): se cierra el modal y no vuelve a Paso 2.

üîé Si quer√©s verificar vos rapidito

localizar el script culpable:

[...document.scripts].map((s,i)=>({i, src:s.src||`inline#${i}`, type:s.type||'classic'}))


Si hay inline, abr√≠ ‚ÄúSources‚Äù y busc√° ‚Äúawait ‚Äù en ese bloque. Cualquier inline no-module con await es el culpable.

probar gotoPaso y panes:

({
  gotoPaso: typeof window.gotoPaso,
  pane2: !!document.querySelector('#wizard-paso2,#paso2,#wizardPaso2,#wizard-step2,[data-wz-step="2"]')
})