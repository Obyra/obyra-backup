ASUNTO: Error 500 al asignar usuario a la obra – endpoint /obras/<obra_id>/asignar_usuario

Reproducción

Abrir /obras/18

Click en Asignar Usuario (sección “Equipo Asignado”)

La app llama a /obras/18/asignar_usuario → Internal Server Error (500) (pantalla blanca)

Qué espero

Poder asignar un usuario a la obra y que devuelva 200 { ok:true } (o 4xx con error legible si falta algo).

Probables causas

La ruta espera POST pero llega GET (o viceversa) → no hay manejo y revienta.

Falta validar parámetros vacíos y se cae al hacer cast/insert.

Cambiaron id por obra_id y la plantilla/JS aún usa el nombre viejo.

No existe/valida la tabla obra_miembros (o falta UNIQUE para evitar duplicados).

Por favor aplicar este fix mínimo (contrato estable)

Backend (Flask):

# Capa de obra (no tareas)
@app.post("/obras/<int:obra_id>/asignar_usuario")
@login_required
def obra_asignar_usuario(obra_id):
    if not current_user.is_admin:
        return jsonify(ok=False, error="Solo admin"), 403

    data = request.get_json(silent=True) or request.form
    # aceptar arrays como form-data o csv
    def _list(name):
        if hasattr(data, "getlist"):
            vals = data.getlist(name)
        else:
            vals = data.get(name) or []
        if isinstance(vals, str):
            vals = [v.strip() for v in vals.split(",") if v.strip()]
        return [int(v) for v in vals]

    user_ids = _list("user_ids[]")
    if not user_ids:
        return jsonify(ok=False, error="Seleccioná al menos 1 usuario"), 400

    # opcional: solo OPERARIO o todo tipo?
    usuarios = Usuario.query.filter(Usuario.id.in__(user_ids)).all()
    if not usuarios:
        return jsonify(ok=False, error="Usuarios inválidos"), 400

    creados = 0
    for u in usuarios:
        db.session.execute(text("""
            INSERT INTO obra_miembros (obra_id, usuario_id)
            VALUES (:o, :u)
            ON CONFLICT (obra_id, usuario_id) DO NOTHING
        """), {"o": obra_id, "u": u.id})
        creados += 1
    db.session.commit()
    return jsonify(ok=True, creados=creados)


DB (idempotencia y compatibilidad):

CREATE TABLE IF NOT EXISTS obra_miembros(
  id SERIAL PRIMARY KEY,
  obra_id INT NOT NULL REFERENCES obras(id) ON DELETE CASCADE,
  usuario_id INT NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE
);
ALTER TABLE obra_miembros
  ADD CONSTRAINT IF NOT EXISTS uq_obra_usuario UNIQUE (obra_id, usuario_id);


Front (botón “Asignar Usuario” de la obra):

const fd = new FormData();
userIds.forEach(id => fd.append("user_ids[]", id));
const res = await fetch(`/obras/${obraId}/asignar_usuario`, {
  method: "POST",
  body: fd,
  credentials: "include"
});
const data = await res.json();
if (!data.ok) alert(data.error);


Importante

Si el usuario abre la URL por GET, la ruta debe responder 405 (no 500).

En templates, asegurar que el enlace apunte a obra_id (no id) si cambiaron el nombre del parámetro.

Lo que necesito ahora

Stacktrace del server para la request 500 POST /obras/18/asignar_usuario (últimas 50 líneas).

Confirmación de que la ruta quedó POST, maneja FormData, y devuelve JSON con errores 4xx en vez de 500.

Criterio de aceptación

Puedo asignar un usuario a la obra sin 500 → aparece en “Equipo Asignado”.

Luego asigno a tareas y completo Fase 0 (operario carga avance con fotos → admin ve miniaturas y aprueba → sube %).