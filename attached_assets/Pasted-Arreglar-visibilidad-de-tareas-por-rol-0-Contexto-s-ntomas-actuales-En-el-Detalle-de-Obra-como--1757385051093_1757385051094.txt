Arreglar visibilidad de tareas por rol
0) Contexto (síntomas actuales)

En el Detalle de Obra (como admin/PM) aparece el mensaje rojo “Error al cargar tareas” en una etapa.

Logueado como operario, la página /obras/mis-tareas muestra “No tienes tareas asignadas”, pese a que le asignamos tareas, y en el Detalle de Obra tampoco aparecen las suyas.

Ya está implementado el bloqueo de Documentos para operarios (mantenerlo).

1) API de listar tareas por etapa (arreglar y robustecer)

Objetivo: Admin/PM ven todas; Operario ve sólo las asignadas; cero 404/403/500; render tolerante a nulos.

Asegurar el endpoint con prefijo del blueprint (/obras/...).
Cualquier fetch desde el front debe apuntar a /obras/etapas/<id>/tareas. Verificar que no quede ninguna llamada a /etapas/... sin el prefijo.

Implementar/ajustar la ruta (o revisar la actual) para que:

Admin/PM: SELECT * FROM tareas WHERE etapa_id = :id.

Operario: JOIN tarea_miembros y filtrar por tarea_miembros.user_id = current_user.id.
Si además se valida pertenencia a la obra, usar es_miembro_obra(obra_id, current_user.id) (ver punto 3).

Para cada tarea, calcular t.metrics = resumen_tarea(t) (ver 1.4).

Retornar un parcial HTML (obras/_tareas_lista.html) en JSON.

@obras_bp.get('/etapas/<int:etapa_id>/tareas')
@login_required
def api_listar_tareas(etapa_id):
    etapa = Etapa.query.get_or_404(etapa_id)

    if is_admin_or_pm():
        q = Tarea.query.filter(Tarea.etapa_id == etapa_id)
    else:
        if not es_miembro_obra(etapa.obra_id, current_user.id):
            return jsonify(ok=False, error='sin permiso'), 403
        q = (Tarea.query
             .join(TareaMiembro, TareaMiembro.tarea_id == Tarea.id)
             .filter(Tarea.etapa_id == etapa_id,
                     TareaMiembro.user_id == current_user.id))

    tareas = q.order_by(Tarea.id.asc()).all()
    for t in tareas:
        t.metrics = resumen_tarea(t)

    html = render_template('obras/_tareas_lista.html', tareas=tareas)
    return jsonify(ok=True, html=html)


Render tolerante a nulos en obras/_tareas_lista.html:

No debe explotar si unidad o cantidad_planificada están en NULL.

Usar defaults y tarea.metrics con fallback.

{% set m = tarea.metrics or {'pct':0,'ejec':0,'restante':0,'atrasada':False} %}
<div class="progress" style="width:180px;height:8px;">
  <div class="progress-bar" style="width: {{ (m.pct or 0)|round(1) }}%;"></div>
</div>
<small class="text-muted">
  {{ (m.ejec or 0)|round(2) }}/{{ tarea.cantidad_planificada or 0 }} {{ tarea.unidad or '' }}
  {% if m.atrasada %}<span class="badge bg-danger ms-2">Atrasada</span>{% endif %}
</small>


Helper de métricas a prueba de nulos:

def resumen_tarea(t):
    plan = float(t.cantidad_planificada or 0)
    ejec = float(
        db.session.query(db.func.coalesce(db.func.sum(TareaAvance.cantidad), 0))
        .filter(TareaAvance.tarea_id == t.id).scalar() or 0
    )
    pct = (ejec/plan*100.0) if plan > 0 else 0.0
    restante = max(plan - ejec, 0.0)
    atrasada = bool(t.fecha_fin_plan and date.today() > t.fecha_fin_plan and restante > 0)
    return {'plan': plan, 'ejec': ejec, 'pct': pct, 'restante': restante, 'atrasada': atrasada}

2) Página Mis Tareas (operario) — corregir query

Objetivo: El operario vea sólo sus tareas asignadas.

@obras_bp.get('/mis-tareas')
@login_required
def mis_tareas():
    q = (db.session.query(Tarea)
         .join(TareaEtapa, Tarea.etapa_id == TareaEtapa.id)
         .join(Obra, TareaEtapa.obra_id == Obra.id)
         .join(TareaMiembro, TareaMiembro.tarea_id == Tarea.id)
         .filter(TareaMiembro.user_id == current_user.id))
    tareas = q.order_by(Obra.nombre.asc(), TareaEtapa.orden.asc(), Tarea.id.asc()).all()
    for t in tareas:
        t.metrics = resumen_tarea(t)
    return render_template('obras/mis_tareas.html', tareas=tareas)


Revisar que obras/mis_tareas.html use la lista tareas y muestre datos básicos (obra, etapa, nombre tarea, progreso).

3) Permisos y pertenencia a obra

Objetivo: No cortar a operarios legítimos y no filtrar a admin/PM.

Helper de pertenencia:

def es_miembro_obra(obra_id, user_id):
    if is_admin_or_pm():
        return True
    return db.session.query(ObraMiembro.id).filter_by(
        obra_id=obra_id, user_id=user_id
    ).first() is not None


Al asignar usuarios a tareas (endpoint de asignación o al crear):

Insertar siempre filas en tarea_miembros (tarea_id, user_id).

Si el usuario no está en obra_miembros, insertarlo (para no romper es_miembro_obra).

Backfill (una vez): para tareas existentes con responsable_id u otros asignados que no tengan tarea_miembros:

Crear tarea_miembros.

Garantizar obra_miembros para esos usuarios.

4) Crear/editar tareas — defaults seguros

Si no se completan unidad o cantidad_planificada, guardar unidad='' y cantidad_planificada=0.

Si se crea con responsable y/o usuarios asignados múltiples, crear las filas de tarea_miembros correspondientes.

5) Mantener bloqueos de Documentos para operarios

Ya está el before_request en el BP de documentos. No tocar, sólo confirmar que sigue devolviendo 403 o redirigiendo a /obras/mis-tareas.

En base.html, el menú Documentos sólo para role in ('admin','pm').

6) Pruebas / QA

Admin/PM

Entrar al Detalle de Obra → abrir una etapa con tareas → no debe mostrar “Error al cargar tareas” y deben renderizarse todas.

Network: la request /obras/etapas/<id>/tareas responde 200 y devuelve el parcial HTML.

Operario

Ingresar a /obras/mis-tareas → ver únicamente tareas asignadas.

Entrar al Detalle de Obra de esa obra → ver únicamente sus tareas dentro de cada etapa.

No ver el menú Documentos; si navega a una URL de Documentos, recibe 403 o redirección.

Asignación

Asignar usuario a una tarea → se crea fila en tarea_miembros; si no estaba en la obra, se crea en obra_miembros.

Refrescar Mis Tareas del operario y Detalle de Obra → aparecen las tareas.

7) Diagnóstico rápido si algo falla

F12 → Network en el Detalle de Obra → revisar /obras/etapas/<id>/tareas:

403 → es_miembro_obra o falta fila en obra_miembros.

404 → falta prefijo /obras/... en el fetch JS.

500 → nulls en unidad/cantidad_planificada o metrics no seteado.

SQL de sanidad:

-- Tareas asignadas al operario actual:
SELECT t.id, t.nombre
FROM tareas t
JOIN tarea_miembros tm ON tm.tarea_id = t.id
WHERE tm.user_id = :operario_id;

-- Pertinencia del operario a la obra
SELECT 1 FROM obra_miembros WHERE obra_id = :obra AND user_id = :operario LIMIT 1;