Objetivo: capturar la selección del Paso 2 antes de navegar, persistirla en WZ_STATE, pintar Paso 3 con esa selección, y habilitar el botón “Siguiente” cuando haya filas.

1) Agregar getSelPaso2
// Devuelve la selección del Paso 2
window.getSelPaso2 = function(modal = document.getElementById('wizardTareasModal')) {
  return [...modal.querySelectorAll('#wizardStep2 input[type="checkbox"]:checked')]
    .map((cb, i) => {
      const label = cb.closest('.form-check, .card, li, .row')
        ?.querySelector('label')?.textContent?.trim() || `Tarea ${i+1}`;
      return {
        id: cb.dataset.id || cb.value || '',
        nombre: cb.dataset.nombre || label,
        etapa_slug: cb.dataset.etapa || ''
      };
    });
};

2) Interceptar “Siguiente” sólo cuando está visible el Paso 2

Guarda la selección en WZ_STATE.tareasSel, navega y renderiza Paso 3.

(function connectPaso2Next(){
  const modal = document.getElementById('wizardTareasModal');
  const btn = document.getElementById('wizardBtnSiguiente');
  if (!modal || !btn || btn.dataset.boundStep2) return;
  btn.dataset.boundStep2 = '1';

  btn.addEventListener('click', (ev) => {
    const step2Visible = !!modal.querySelector('#wizardStep2:not(.d-none)');
    if (!step2Visible) return;              // dejar fluir para otros pasos

    const sel = getSelPaso2(modal);
    console.log('[WZ] Paso 2 selección =', sel.length, sel);
    if (!sel.length) return;                // no capturó nada → no avanzamos

    ev.preventDefault();                    // detenemos el submit/navegación
    window.WZ_STATE = window.WZ_STATE || {};
    window.WZ_STATE.tareasSel = sel;

    gotoPaso(3);
    renderPaso3(sel);                       // pinto filas con la selección
    updateWizardProgress?.(3);
  });
})();

3) Asegurar opciones y renderPaso3 con habilitación de “Siguiente”
async function ensureOpciones(obraId){
  if (window.WZ_STATE?.opciones) return window.WZ_STATE.opciones;
  try {
    const r = await fetch(`/obras/api/wizard-tareas/opciones?obra_id=${obraId}`, {credentials:'include'});
    const j = await r.json();
    const unidades = j?.unidades || ['m2','m','m3','u','kg','h'];
    const usuarios = j?.usuarios || [];
    window.WZ_STATE = window.WZ_STATE || {};
    window.WZ_STATE.opciones = {unidades, usuarios};
    return window.WZ_STATE.opciones;
  } catch {
    const fallback = {unidades: ['m2','m','m3','u','kg','h'], usuarios: []};
    window.WZ_STATE = window.WZ_STATE || {};
    window.WZ_STATE.opciones = fallback;
    return fallback;
  }
}

function enableNextStep3(){
  const hasRows = document.querySelectorAll('#wizardStep3 #tablaDatosWizard tbody tr').length > 0;
  const btn = document.getElementById('wizardBtnSiguiente');
  if (!btn) return;
  btn.disabled = !hasRows;
  btn.classList.toggle('disabled', !hasRows);
  btn.removeAttribute('aria-disabled');
}

window.renderPaso3 = async function(tareas){
  const modal = document.getElementById('wizardTareasModal');
  const tbody = modal.querySelector('#wizardStep3 #tablaDatosWizard tbody');
  if (!tbody) return;

  const obraId = Number(modal.getAttribute('data-obra-id'));
  const {unidades, usuarios} = await ensureOpciones(obraId);

  tbody.innerHTML = tareas.map((t, i) => `
    <tr>
      <td>${t.etapa_slug || ''}</td>
      <td>${t.nombre || ''}</td>
      <td><input type="date" class="form-control form-control-sm" name="rows[${i}][inicio]"></td>
      <td><input type="date" class="form-control form-control-sm" name="rows[${i}][fin]"></td>
      <td><input type="number" class="form-control form-control-sm" name="rows[${i}][horas]" value="8" min="0" step="0.5"></td>
      <td><input type="number" class="form-control form-control-sm" name="rows[${i}][cantidad]" value="1" min="0" step="0.01"></td>
      <td>
        <select class="form-select form-select-sm unidad-select" name="rows[${i}][unidad]">
          ${unidades.map(u => `<option value="${u}">${u}</option>`).join('')}
        </select>
      </td>
      <td>
        <select class="form-select form-select-sm asignado-select" name="rows[${i}][asignado]">
          <option value="">(sin asignar)</option>
          ${usuarios.map(u => `<option value="${u.id}">${u.nombre}</option>`).join('')}
        </select>
      </td>
      <td>
        <select class="form-select form-select-sm" name="rows[${i}][prioridad]">
          <option value="media" selected>Media</option>
          <option value="alta">Alta</option>
          <option value="baja">Baja</option>
        </select>
      </td>
    </tr>
  `).join('');

  enableNextStep3();
  console.log('[WZ] Paso 3 renderizado con', tareas.length, 'filas');
};

4) Botón Atrás del Paso 3 → Paso 2 (si no existe, crearlo y bindearlo)
(function ensureBackBtnStep3(){
  const modal = document.getElementById('wizardTareasModal');
  const footer = modal?.querySelector('.modal-footer');
  if (!modal || !footer) return;

  let back = document.getElementById('wizardBtnAnteriorPaso3');
  if (!back) {
    back = document.createElement('button');
    back.id = 'wizardBtnAnteriorPaso3';
    back.type = 'button';
    back.className = 'btn btn-outline-secondary me-auto';
    back.textContent = 'Atrás';
    footer.insertBefore(back, footer.firstChild);
  }
  if (!back.dataset.bound) {
    back.dataset.bound = '1';
    back.addEventListener('click', (e) => { e.preventDefault(); gotoPaso(2); });
  }
})();

5) Quitar duplicaciones de listeners previos

Eliminar cualquier handler anterior que intente capturar “Siguiente” en Paso 2 o renderizar Paso 3, para que este sea el único flujo canónico.