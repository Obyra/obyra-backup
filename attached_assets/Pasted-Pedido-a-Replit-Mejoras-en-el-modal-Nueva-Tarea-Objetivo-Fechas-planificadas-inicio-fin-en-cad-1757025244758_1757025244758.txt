Pedido a Replit: Mejoras en el modal “Nueva Tarea”
Objetivo

Fechas planificadas (inicio/fin) en cada tarea.

Selección múltiple en “Tareas sugeridas…” → si tildo varias, se crean varias tareas de una.

No usar Descripción (no mostrar en UI ni guardar en BD).

Mantener Horas estimadas y Responsable.

Por ahora ocultar “Usuarios asignados” en este modal.

Archivos

Frontend: templates/obras/detalle.html (modal #nuevaTareaModal y su JS inline).

Backend: obras.py (blueprint obras_bp, usar prefijo /obras).

1) Frontend (modal + JS)
1.1. Quitar “Descripción”

Eliminar del modal el bloque <label>Descripción</label> + <textarea>.

No enviar descripcion en el FormData.

Si hay lista de sugeridas con texto descriptivo debajo de cada ítem, mantenerla solo como ayuda visual (no se guarda en BD).

1.2. Fechas planificadas

Mantener <input type="date" name="fecha_inicio_plan"> y <input type="date" name="fecha_fin_plan">.

1.3. “Tareas sugeridas” con selección múltiple

Renderizar cada sugerida como checkbox:

<input type="checkbox"
       name="sugeridas[]"
       value="{{sug.id}}"
       data-nombre="{{sug.nombre}}">


Comportamiento del formulario:

0 sugeridas → crear 1 tarea usando nombre (input manual).

1 sugerida → autocompletar nombre con el de la sugerida (editable).

2+ sugeridas → deshabilitar el input nombre (placeholder “N tareas seleccionadas”) y al enviar crear N tareas (una por cada sugerida).

Hint debajo del listado:
“Si seleccionás varias sugeridas, se crearán varias tareas con el mismo responsable, horas y fechas.”

1.4. Ocultar “Usuarios asignados”

No mostrar ese bloque en el modal (queda para otra etapa).

1.5. Envío del formulario (JS)

Asegurar que viajen todas las sugeridas como sugeridas[] (IDs numéricos).

No incluir descripcion.

Usar prefijo /obras en la URL.

const form = document.querySelector('#nuevaTareaModal form');

form.addEventListener('submit', async (e) => {
  e.preventDefault();

  const fd = new FormData(form);

  // Normalizar array de sugeridas (IDs)
  fd.delete('sugeridas');     // por si quedó
  // vuelve a armar desde checkboxes
  const checks = [...document.querySelectorAll('[name="sugeridas[]"]:checked')];
  checks.forEach(c => fd.append('sugeridas[]', c.value));

  // Si hay 2+ sugeridas, deshabilitar nombre (se ignora en el back igualmente)
  const nombreIpt = form.querySelector('[name="nombre"]');
  if (checks.length >= 2 && nombreIpt) nombreIpt.disabled = true;

  const resp = await fetch('/obras/tareas/crear', { method: 'POST', body: fd });
  const data = await resp.json();

  if (!data.ok) {
    alert(data.error || 'Error al crear las tareas múltiples');
    return;
  }

  // éxito
  // opcional: toast con data.created
  location.reload();
});

2) Backend (crear 1 o muchas)
2.1. Endpoint

Ajustar/crear POST /obras/tareas/crear (en obras.py, dentro de obras_bp).

Debe aceptar ambos casos:

Simple (sin sugeridas[]) → crea 1 tarea con nombre manual.

Múltiple (sugeridas[] con IDs) → crea una tarea por cada ID.

2.2. Requisitos

NO guardar descripcion (ignorar si llega).

Guardar: obra_id, etapa_id, responsable_id, horas_estimadas, fecha_inicio_plan, fecha_fin_plan, nombre.

Un solo commit al final; si falla, rollback y devolver {ok:false, error:"..."}.

Tolerar formatos de fecha YYYY-MM-DD y dd/mm/aaaa.

from datetime import datetime

def parse_date(s):
    if not s: return None
    for fmt in ("%Y-%m-%d", "%d/%m/%Y"):
        try: return datetime.strptime(s, fmt).date()
        except: pass
    return None

@obras_bp.post("/tareas/crear")
@login_required
def crear_tareas():
    try:
        obra_id  = request.form.get("obra_id", type=int)
        etapa_id = request.form.get("etapa_id", type=int)
        horas    = request.form.get("horas_estimadas", type=float)
        resp_id  = request.form.get("responsable_id", type=int) or None
        fi = parse_date(request.form.get("fecha_inicio_plan"))
        ff = parse_date(request.form.get("fecha_fin_plan"))

        sugeridas = request.form.getlist("sugeridas[]")  # << CLAVE

        # caso simple
        if not sugeridas:
            nombre = request.form.get("nombre", "").strip()
            if not nombre:
                return jsonify(ok=False, error="Falta el nombre"), 400
            t = Tarea(
                obra_id=obra_id, etapa_id=etapa_id, nombre=nombre,
                responsable_id=resp_id, horas_estimadas=horas,
                fecha_inicio_plan=fi, fecha_fin_plan=ff
            )
            db.session.add(t)
            db.session.commit()
            return jsonify(ok=True, created=1)

        # caso múltiple
        created = 0
        for sid in sugeridas:
            sug = TareaSugerida.query.get(int(sid))
            if not sug:
                continue
            t = Tarea(
                obra_id=obra_id, etapa_id=etapa_id, nombre=sug.nombre,
                responsable_id=resp_id, horas_estimadas=horas,
                fecha_inicio_plan=fi, fecha_fin_plan=ff
            )
            db.session.add(t)
            created += 1

        if created == 0:
            db.session.rollback()
            return jsonify(ok=False, error="No se pudo crear ninguna tarea"), 400

        db.session.commit()
        return jsonify(ok=True, created=created)

    except Exception as e:
        current_app.logger.exception("crear_tareas")
        db.session.rollback()
        return jsonify(ok=False, error=str(e)), 400

3) BD (solo si hace falta)

En tareas, confirmar columnas:

fecha_inicio_plan DATE, fecha_fin_plan DATE (agregar si faltan).

La columna descripcion puede quedar, pero no se usa (no setear).
Si hoy es NOT NULL, hacer una pequeña migración para permitir NULL o default ''.

4) Criterios de aceptación

El modal no muestra “Descripción”.

Con 0 sugeridas → se crea 1 tarea con nombre manual.

Con 1 sugerida → se autocompleta el nombre (editable) y se crea 1 tarea.

Con 2+ sugeridas → el input nombre queda deshabilitado y se crean N tareas (una por cada sugerida).

En todos los casos se guardan Horas estimadas, Responsable, Inicio planificado y Fin planificado.

La request pega a /obras/tareas/crear, envía sugeridas[] (IDs) y responde {ok:true, created:N}.

Si hay error, muestra alert con error.

Con esto se resuelve el error de “Error al crear las tareas múltiples”, queda la creación en lote, las fechas plan y la limpieza de descripción. Si necesitan capturas de Network para validar, me avisan.