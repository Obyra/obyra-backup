Problema: En el detalle de la obra, la sección “Etapas del Proyecto” muestra “Error al cargar tareas” cuando entro con usuario operario.
Causa probable: El endpoint que lista las tareas de la obra devuelve 403/500 para operarios (no filtra por tareas asignadas).

Qué hacer (en este orden):

Confirmar el fallo exacto

Abrir DevTools → Network → recargar la página de la obra.

Filtrar por tareas o por etapas (o buscar el request que retorna JSON de tareas).

Ver el status (403/500) y la URL exacta llamada por el frontend.

Copiar la URL aquí y dejar visible el response de error.

Localizar el endpoint

Buscar en el repo:

por el mensaje "Error al cargar tareas" en templates/obras/detalle.html (ahí está el fetch).

por la URL del request en los blueprints (seguramente en obras.py).

Ajustar permisos del endpoint de tareas

En el endpoint que devuelve las tareas de una obra (p.ej. /obras/<obra_id>/...tareas...), mantener la respuesta en el mismo formato que espera el frontend, pero ajustar la query así:

from flask_login import current_user, login_required
from models import db, TareaEtapa, TareaMiembro, Etapa, Obra  # nombres reales!

@obras_bp.get("/<int:obra_id>/tareas")  # usar la ruta real
@login_required
def tareas_de_obra(obra_id):
    # Validar que el usuario pertenece a la obra (admin/pm: ven todo; operario: sólo sus tareas)
    # 1) Base query: todas las tareas de la obra
    q = (
        db.session.query(TareaEtapa)
          .join(Etapa, Etapa.id == TareaEtapa.etapa_id)
          .join(Obra, Obra.id == Etapa.obra_id)
          .filter(Etapa.obra_id == obra_id)
    )

    # 2) Filtro por rol: operario solo ve tareas asignadas
    if getattr(current_user, "role", None) == "operario":
        q = (
            q.join(TareaMiembro, TareaMiembro.tarea_id == TareaEtapa.id)
             .filter(TareaMiembro.user_id == current_user.id)
        )

    tareas = q.all()

    # 3) Serializar usando la función existente que el frontend espera.
    #    Si hay una util como tarea_to_dict / serialize_tarea, usarla.
    #    Si no, armar un dict mínimo con: id, nombre, etapa (id/nombre), estado, horas_estimadas, etc.
    data = [t.to_dict() for t in tareas]  # reemplazar por el serializador real
    return jsonify({"ok": True, "tareas": data})


Importante: usar los nombres de tablas/modelos reales (__tablename__, FK) y el serializador real que usa hoy el frontend (no cambiar el formato de salida).

Permiso de lectura de obra

Asegurar que operarios puedan ver la obra si son miembros (tabla obra_miembros), aunque no puedan modificar.

Si hay un helper tipo is_member_of_obra(obra_id) o can_view_obra(obra_id), úsalo para bloquear 403 sólo si no es miembro.

Probar

Con operario:

recargar el detalle de obra → el XHR de tareas debe dar 200 y la UI mostrar solo sus tareas.

Con PM/Admin: ver todas las tareas.

(Opcional) Log de error

Si el XHR sigue en 500, pegar el stacktrace de los logs y la línea exacta que rompe (usualmente import/relación o campo inexistente).