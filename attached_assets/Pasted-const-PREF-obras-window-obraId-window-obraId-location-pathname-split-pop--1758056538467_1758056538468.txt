const PREF = '/obras';
window.obraId = window.obraId ?? +location.pathname.split('/').pop();

// helper robusto (no MÁS '<DOCTYPE')
async function fetchJSON(url, opts){
  const r = await fetch(url, opts);
  const txt = await r.text();
  const ct = r.headers.get('content-type') || '';
  if(!r.ok) throw new Error(`HTTP ${r.status}: ${txt.slice(0,300)}`);
  if(!ct.includes('application/json')) throw new Error(`No JSON (${ct}): ${txt.slice(0,300)}`);
  return JSON.parse(txt);
}

function getCatalogoIds(){
  return [...document.querySelectorAll('.etp:checked, .catalog-checkbox:checked')]
    .map(el => Number(el.dataset.catalogId || el.value))
    .filter(Boolean);
}

let autoTimer=null, busy=false;

async function autoAddAndNext(){
  if (busy) return;
  const catalogoIds = getCatalogoIds();
  if (!catalogoIds.length) { showErr('Seleccioná al menos una etapa del catálogo.'); return; }

  try{
    busy = true;
    disablePaso1(true);

    // 1) Crear/recuperar etapas de la obra
    const bulk = await fetchJSON(`${PREF}/api/obras/${window.obraId}/etapas/bulk_from_catalog`, {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ catalogo_ids: catalogoIds })
    });
    if (bulk.ok === false) throw new Error(bulk.error || 'Error en bulk_from_catalog');

    const etapaIds = [...(bulk.creadas||[]), ...(bulk.existentes||[])].map(e=>+e.id).filter(Boolean);
    if (!etapaIds.length) throw new Error('No se devolvieron IDs de etapas');

    window.WIZARD = window.WIZARD || {};
    window.WIZARD.etapa_ids = etapaIds;

    // 2) Preview filtrado y salto a Paso 2
    const body = { obra_id: window.obraId, etapa_ids: etapaIds };
    window.WIZARD.preview = await fetchJSON(`${PREF}/api/wizard-tareas/preview`, {
      method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body)
    });

    gotoPaso(2);
  }catch(e){
    console.error('Wizard Paso1 autoAddAndNext:', e);
    showErr(`Error: ${e.message}`);
  }finally{
    busy = false;
    disablePaso1(false);
  }
}

// Botón “Agregar Etapas Seleccionadas” → hace todo y avanza
document.getElementById('btnAgregarEtapasSel')?.addEventListener('click', (e)=>{
  e.preventDefault(); autoAddAndNext();
});

// Botón “Siguiente” en Paso 1 → si no agregó, agrega y avanza
document.getElementById('wizardBtnSiguiente')?.addEventListener('click', async (e)=>{
  if (window.wizardPasoActual !== 1) return;  // otros pasos siguen normal
  e.preventDefault(); autoAddAndNext();
});

// Auto-avance al tildar (con debounce para no spamear el backend)
document.querySelectorAll('.etp, .catalog-checkbox').forEach(cb=>{
  cb.addEventListener('change', ()=>{
    clearTimeout(autoTimer);
    autoTimer = setTimeout(autoAddAndNext, 350);
  });
});

// helpers visuales
function disablePaso1(flag){
  document.querySelectorAll('.etp, .catalog-checkbox, #btnAgregarEtapasSel, #wizardBtnSiguiente')
    .forEach(el => flag ? el.setAttribute('disabled','') : el.removeAttribute('disabled'));
  document.getElementById('wizardInfo')?.classList.toggle('d-none', !flag);
}
function showErr(msg){ const n = document.getElementById('wizardError'); if(n) n.textContent = msg; else alert(msg); }
Y en el HTML de cada tarjeta de etapa (por si falta)
Asegurate que el checkbox tenga clase y data-catalog-id:

html
Copiar código
<input type="checkbox" class="etp" data-catalog-id="{{ e.id }}">
Qué logramos
Tildás etapas → se crean/recuperan (idempotente), se guardan los IDs reales en window.WIZARD.etapa_ids y pasa a Paso 2.

“Siguiente” también agrega y avanza si aún no lo hizo.

Si algo falla, te muestra el error real (no “undefined”).