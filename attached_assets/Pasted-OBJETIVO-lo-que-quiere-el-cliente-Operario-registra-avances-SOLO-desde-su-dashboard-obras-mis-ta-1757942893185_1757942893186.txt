OBJETIVO (lo que quiere el cliente)

Operario registra avances SOLO desde su dashboard /obras/mis-tareas, cargando:

Cantidad ejecutada (misma unidad que la tarea; el campo unidad se ve pero está bloqueado).

Horas trabajadas (opcional).

Varias fotos (evidencia del avance).

Administrador debe poder ver en el módulo de obra:

Listado de avances de cada tarea con fotos (miniaturas + link a original).

% de avance por tarea, etapa y obra (se actualiza al crear un avance).

Totales ejecutados vs objetivo (m²/m³/u) y horas estimadas vs reales.

ALCANCE (qué debe entregar el agente)
1) Datos y DB

Asegurar columnas en tareas:

ALTER TABLE tareas
  ADD COLUMN IF NOT EXISTS cantidad_objetivo NUMERIC,
  ADD COLUMN IF NOT EXISTS unidad VARCHAR(10),
  ADD COLUMN IF NOT EXISTS horas_estimadas NUMERIC,
  ADD COLUMN IF NOT EXISTS porcentaje NUMERIC;  -- cache del % de la tarea


Asegurar columnas en tarea_avances:

ALTER TABLE tarea_avances
  ADD COLUMN IF NOT EXISTS cantidad_ingresada NUMERIC,
  ADD COLUMN IF NOT EXISTS unidad_ingresada VARCHAR(10),
  ADD COLUMN IF NOT EXISTS horas_trabajadas NUMERIC; -- opcional
CREATE INDEX IF NOT EXISTS idx_avance_tarea ON tarea_avances(tarea_id);


Tabla fotos (si no existe):

CREATE TABLE IF NOT EXISTS tarea_avance_fotos(
  id SERIAL PRIMARY KEY,
  avance_id INT NOT NULL REFERENCES tarea_avances(id) ON DELETE CASCADE,
  file_path VARCHAR(255) NOT NULL,
  mime VARCHAR(64),
  w INT, h INT,
  creado_at TIMESTAMP DEFAULT NOW()
);

2) Backend – Seguridad y creación de avances

Endpoint POST /api/tareas/<int:tarea_id>/avances:

Autorización: permitir admin o operario asignado y (si es operario) requerir header X-From-Dashboard: 1.

Unidad: el servidor ignora la unidad enviada; usa siempre tarea.unidad (normalizada).

Fotos múltiples: aceptar multipart/form-data y request.files.getlist('fotos').

Guardar avance y fotos en /media/avances/<avance_id>/....

Tras guardar, recalcular tarea.porcentaje (ver punto 3).

Agregar helper de normalización:

UNIT_MAP={"m2":"m2","m³":"m3","m3":"m3","m²":"m2","u":"u","un":"u","unidad":"u","kg":"kg","lt":"lt","lts":"lt","l":"lt"}
def norm_unit(u): return UNIT_MAP.get((u or "").strip().lower(), (u or "").strip().lower())


Endpoint para servir media autenticada:

@app.get("/media/<path:relpath>")
@login_required
def media(relpath): send_from_directory(BASE_MEDIA, relpath)


Guardar en DB rutas relativas tipo avances/123/uuid.jpg.

3) Backend – Cálculo de porcentajes

Función para sumar ejecutado y calcular % por tarea:

from sqlalchemy import func
def suma_ejecutado(tarea_id):
    return db.session.query(func.coalesce(func.sum(TareaAvance.cantidad_ingresada),0)).filter_by(tarea_id=tarea_id).scalar()
def recalc_tarea_pct(tarea_id):
    t = Tarea.query.get(tarea_id)
    meta = float(t.cantidad_objetivo or 0)
    if meta <= 0: t.porcentaje = 0
    else: t.porcentaje = min(100, round((float(suma_ejecutado(t.id))/meta)*100,2))
    db.session.commit()


Llamar recalc_tarea_pct() cada vez que se crea un avance.

Helpers para % de etapa y obra (promedio ponderado por cantidad_objetivo):

def pct_etapa(etapa):
    tareas = etapa.tareas
    meta = sum((t.cantidad_objetivo or 0) for t in tareas)
    if meta <= 0:
        return round(sum((t.porcentaje or 0) for t in tareas)/max(len(tareas),1),2)
    ej = sum((t.cantidad_objetivo or 0)*(t.porcentaje or 0)/100 for t in tareas)
    return round((ej/meta)*100,2)

def pct_obra(obra):
    metas, ejecs = [], []
    for e in obra.etapas:
        m = sum((t.cantidad_objetivo or 0) for t in e.tareas)
        metas.append(m)
        ejecs.append(m * (pct_etapa(e)/100))
    return round((sum(ejecs)/max(sum(metas),1))*100,2) if sum(metas)>0 else \
           round(sum(pct_etapa(e) for e in obra.etapas)/max(len(obra.etapas),1),2)

4) Frontend – Operario (dashboard)

En /obras/mis-tareas:

Mostrar botón “+ Avance” solo si rol == OPERARIO.

En el modal:

cantidad_ingresada (req), horas_trabajadas (opt), nota (opt),

unidad_ingresada readonly con tarea.unidad,

fotos multiple.

Enviar con FormData a /api/tareas/<id>/avances con header X-From-Dashboard: 1.

5) Frontend – Administrador

En vista de obra y en cada tarea:

Mostrar avances (últimos primero) con:

línea “cantidad unidad — usuario — fecha”

miniaturas de fotos (grid) con link al original /media/....

Mostrar %:

En tarjeta de tarea: badge {{ tarea.porcentaje }}% + barra.

En encabezado de etapa: pct_etapa(etapa).

En panel Progreso de obra: pct_obra(obra).

Mostrar metas: “Objetivo: cantidad_objetivo unidad — Ejecutado: suma_ejecutado()”.

Query en Admin debe traer avances con fotos:

from sqlalchemy.orm import joinedload
avances = (TareaAvance.query
           .options(joinedload(TareaAvance.fotos), joinedload(TareaAvance.usuario))
           .filter(TareaAvance.tarea_id==tarea_id)
           .order_by(TareaAvance.creado_at.desc())).all()

6) Criterios de aceptación (QA)

Operario:

En /obras/mis-tareas ve el botón, puede cargar cantidad + fotos múltiples y NO puede cambiar la unidad.

Si intenta postear sin header X-From-Dashboard, obtiene 403.

Admin:

Ve en la tarjeta de cada tarea el % actualizado tras el avance.

En la vista de tarea, ve el listado de avances con miniaturas y links a las fotos.

En el panel lateral/top ve Progreso de obra (%) coherente.

DB:

tarea_avances.unidad_ingresada coincide con tareas.unidad.

tareas.porcentaje se actualiza al crear avances.

7) Archivos a tocar (nombres de ejemplo)

models.py: Tarea, TareaAvance, TareaAvanceFoto (relaciones + columnas).

routes_obras.py (o similar):

GET /obras/mis-tareas (bandera on_dashboard=True).

POST /api/tareas/<id>/avances (auth + guardado + recálculo).

GET /media/<path> (servir archivos).

templates/obras/mis_tareas.html + parcial de tarjeta de tarea del operario (modal y fetch).

templates/admin/obra_detalle.html y/o templates/admin/tarea_detalle.html (grid de avances + fotos + barras de %).

Nota importante

Guardar file_path relativo y mostrar en Admin con /media/{{ file_path }}.

Crear miniaturas opcionales (.thumb.jpg) al subir para optimizar carga; si no existen, usar el original.