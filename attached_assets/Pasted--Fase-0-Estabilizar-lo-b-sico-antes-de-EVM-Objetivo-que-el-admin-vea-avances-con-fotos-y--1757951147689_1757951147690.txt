üîí Fase 0 ‚Äî Estabilizar lo b√°sico (antes de EVM)

Objetivo: que el admin vea avances (con fotos) y % por tarea/etapa/obra.
No tocar nada de EVM hasta que esto est√© ‚úÖ.

Tareas

/media autenticado y rutas relativas en DB

Guardar file_path como avances/<avance_id>/<uuid>.jpg.

Endpoint:

@app.get("/media/<path:p>"); @login_required
def media(p): return send_from_directory(BASE_MEDIA, p)


En Admin usar <img src="/media/{{ f.file_path }}">.

Listar avances en Admin (con fotos)

Query:

avances = (TareaAvance.query
  .options(joinedload(TareaAvance.fotos), joinedload(TareaAvance.usuario))
  .filter_by(tarea_id=tarea_id)
  .order_by(TareaAvance.creado_at.desc())).all()


Vista: grid de miniaturas + link al original.

Aprobaci√≥n de avances

TareaAvance.estado: pendiente_aprobacion|aprobado|rechazado.

Al aprobar:

recalcular % de la tarea:
% = min(100, (Œ£ cantidad_aprobada / cantidad_objetivo)*100)

(si cargan horas) acumular HH y costo real.

% Etapa/Obra

Ponderado por cantidad_objetivo.

Mostrar badge en etapa y panel ‚ÄúProgreso de obra‚Äù.

QA de salida

Operario carga avance con fotos desde /mis-tareas ‚Üí Admin ve miniaturas y puede Aprobar/Rechazar.

Al aprobar sube % tarea, y se refleja en etapa y obra.

üü° Fase 1 ‚Äî Encender EVM con feature flag

Objetivo: agregar calendario (inicio/fin), plan semanal, PV/EV/AC, pero sin romper lo anterior.

Flag

.env ‚Üí EVM_ENABLED=true/false

Por obra: campo obra.evm_enabled (default false).
Mostrar UI EVM solo si est√° encendido.

DB m√≠nima
ALTER TABLE tareas
  ADD COLUMN IF NOT EXISTS fecha_inicio DATE,
  ADD COLUMN IF NOT EXISTS fecha_fin DATE,
  ADD COLUMN IF NOT EXISTS presupuesto_mo NUMERIC;

CREATE TABLE IF NOT EXISTS tarea_plan_semanal (
  id SERIAL PRIMARY KEY,
  tarea_id INT REFERENCES tareas(id) ON DELETE CASCADE,
  semana DATE NOT NULL,            -- lunes ISO
  qty_plan NUMERIC DEFAULT 0,
  pv_mo NUMERIC DEFAULT 0,
  UNIQUE(tarea_id, semana)
);


El agregado semanal de avances pod√©s calcularlo ‚Äúon the fly‚Äù; materializalo despu√©s si hace falta.

Servicios

Generar plan lineal al guardar/editar tarea con fechas:

Distribuir cantidad_objetivo y presupuesto_mo parejo por semanas [inicio, fin].

Curva S (acumulada) por tarea:

PV = Œ£ pv_mo hasta semana.

AC = Œ£ (horas_trabajadas_aprobadas * tarifa_hora) hasta semana.

EV = presupuesto_mo * (cantidad_real_acum / cantidad_objetivo).

CPI = EV/AC; SPI = EV/PV.

Alertas diarias (cron):

Abrir alerta si CPI < 0.9 o SPI < 0.9 o vencida (hoy > fecha_fin y %<100).

Endpoints

POST /api/tareas/<id>/plan/generar (lineal)

GET /api/tareas/<id>/curva-s?desde&hasta

GET /api/obras/<id>/curva-s (agregado)

GET /api/alertas | POST /api/alertas/<id>/cerrar

UI

En Tarea (Admin): campos Inicio/Fin/Presupuesto MO + bot√≥n ‚ÄúGenerar plan‚Äù.

Gr√°fico PV/EV/AC (l√≠neas) + CPI/SPI.

En Etapa/Obra: curva S agregada y listado de alertas.

QA de salida

Con flag on y fechas cargadas:

Se genera plan semanal.

Curva S devuelve series coherentes (PV lineal, EV/AC seg√∫n avances).

Al aprobar avances, cambian EV/AC y KPI; si CPI<0.9, aparece alerta.

üß≠ Roles (para no marearse)

Operario: solo /mis-tareas, carga cantidad/horas/fotos.

Admin: nunca usa /mis-tareas. Planifica, ve fotos, aprueba avances y mira KPIs / curva S.

üß™ Smoke tests r√°pidos

Admin crea tarea con cantidad_objetivo=100 m2, inicio= lunes, fin= 4 semanas, presupuesto_mo=1.000.000.
‚Üí Generar plan ‚Üí /curva-s devuelve PV creciente ~250k/sem.

Operario carga 20 m2 y 15 h (pendiente) + fotos ‚Üí Admin aprueba ‚Üí
% tarea = 20%, EV = 200k, AC = 15h*tarifa, CPI = EV/AC.

Apagar flag ‚Üí la UI EVM desaparece; fotos y % b√°sico siguen intactos.

üß± Orden de implementaci√≥n (corto y seguro)

Fase 0 (fotos + % + aprobaci√≥n) ‚úÖ

Agregar flag y campos de fechas/presupuesto ‚úÖ

Generar plan lineal ‚úî

Curva S por tarea ‚úî ‚Üí etapa/obra ‚úî

Alertas ‚úî