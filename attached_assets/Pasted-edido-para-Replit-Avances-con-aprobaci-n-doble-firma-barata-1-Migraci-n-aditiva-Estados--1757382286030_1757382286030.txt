edido para Replit – “Avances con aprobación” (doble firma barata)
1) Migración (aditiva)
-- Estados del avance y aprobación
ALTER TABLE tarea_avances
  ADD COLUMN IF NOT EXISTS status VARCHAR(12) NOT NULL DEFAULT 'pendiente' 
    CHECK (status IN ('pendiente','aprobado','rechazado')),
  ADD COLUMN IF NOT EXISTS confirmed_by INT NULL REFERENCES usuarios(id),
  ADD COLUMN IF NOT EXISTS confirmed_at TIMESTAMP NULL,
  ADD COLUMN IF NOT EXISTS reject_reason TEXT NULL;


No tocamos nada más. Las fotos ya cuelgan de tarea_avances con avance_id.

2) Modelos (SQLAlchemy)
# models.py
class TareaAvance(db.Model):
    __tablename__ = "tarea_avances"
    id = db.Column(db.Integer, primary_key=True)
    tarea_id = db.Column(db.Integer, db.ForeignKey("tareas.id"), nullable=False, index=True)
    user_id = db.Column(db.Integer, db.ForeignKey("usuarios.id"))
    fecha = db.Column(db.Date, default=date.today)
    cantidad = db.Column(db.Numeric, nullable=False)
    unidad = db.Column(db.String(10))
    notas = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    status = db.Column(db.String(12), default="pendiente")  # pendiente/aprobado/rechazado
    confirmed_by = db.Column(db.Integer, db.ForeignKey("usuarios.id"))
    confirmed_at = db.Column(db.DateTime)
    reject_reason = db.Column(db.Text)


Métrica (solo suma aprobados):

def resumen_tarea(t):
    plan = float(t.cantidad_planificada or 0)
    ejec = float(
        db.session.query(db.func.coalesce(db.func.sum(TareaAvance.cantidad), 0))
        .filter(TareaAvance.tarea_id == t.id, TareaAvance.status == "aprobado")
        .scalar() or 0
    )
    pct = (ejec/plan*100.0) if plan>0 else 0.0
    restante = max(plan - ejec, 0.0)
    atrasada = bool(t.fecha_fin_plan and date.today() > t.fecha_fin_plan and restante > 0)
    return {"plan": plan, "ejec": ejec, "pct": pct, "restante": restante, "atrasada": atrasada}

3) Permisos helpers
# utils/permissions.py (o similar)
def is_admin_or_pm(u):
    return getattr(u, "role", None) in ("admin", "pm")

def can_approve_avance(u, avance):
    return is_admin_or_pm(u) and u.id != avance.user_id

4) Endpoints
4.1 Registrar avance (sin cambios de UI, solo lógica)
# POST /tareas/<int:tarea_id>/avances
@login_required
def crear_avance(tarea_id):
    t = Tarea.query.get_or_404(tarea_id)
    cantidad = request.form.get("cantidad", type=float)
    unidad = request.form.get("unidad") or t.unidad
    notas = request.form.get("notas")

    if not cantidad or cantidad <= 0:
        return jsonify(ok=False, error="Cantidad inválida"), 400

    av = TareaAvance(
        tarea_id=t.id, user_id=current_user.id,
        cantidad=cantidad, unidad=unidad, notas=notas
    )

    # Regla barata:
    # - Operario: queda pendiente (necesita aprobación)
    # - PM/Admin: queda aprobado instantáneo (auto-confirmado)
    if current_user.role in ("admin", "pm"):
        av.status = "aprobado"
        av.confirmed_by = current_user.id
        av.confirmed_at = datetime.utcnow()
        # si querés forzar SIEMPRE doble firma, ver sección “Modo estricto” abajo

    db.session.add(av)

    # Subida de fotos (igual que hoy)
    # ...

    # Fecha real de inicio si es el primer avance aprobado
    if not t.fecha_inicio_real and av.status == "aprobado":
        t.fecha_inicio_real = datetime.utcnow()

    db.session.commit()
    return jsonify(ok=True)

4.2 Aprobar / Rechazar avance
# POST /avances/<int:avance_id>/aprobar
@login_required
def aprobar_avance(avance_id):
    av = TareaAvance.query.get_or_404(avance_id)
    if not can_approve_avance(current_user, av):
        return jsonify(ok=False, error="Sin permiso"), 403
    if av.status == "aprobado":
        return jsonify(ok=True)  # idempotente

    av.status = "aprobado"
    av.confirmed_by = current_user.id
    av.confirmed_at = datetime.utcnow()

    # si es el primer aprobado de la tarea → fecha inicio real
    t = Tarea.query.get(av.tarea_id)
    if t and not t.fecha_inicio_real:
        t.fecha_inicio_real = datetime.utcnow()

    db.session.commit()
    return jsonify(ok=True)

# POST /avances/<int:avance_id>/rechazar
@login_required
def rechazar_avance(avance_id):
    av = TareaAvance.query.get_or_404(avance_id)
    if not can_approve_avance(current_user, av):
        return jsonify(ok=False, error="Sin permiso"), 403

    av.status = "rechazado"
    av.reject_reason = request.form.get("motivo")  # opcional
    av.confirmed_by = current_user.id
    av.confirmed_at = datetime.utcnow()
    db.session.commit()
    return jsonify(ok=True)

5) UI (mínimo costo)

Modal “Registrar Avance”: queda igual para los 3 roles.

En la tarjeta de cada tarea:

Mostrar un chip para PM/Admin si hay pendientes: ⚑ Pendientes (n) → abre listita con cada avance (cantidad, notas, fotos) con botones Aprobar / Rechazar.

Para Operario, mostrar estado de lo que cargó: En revisión, Aprobado o Rechazado.

En Mis Tareas (PM/Admin): tab “Pendientes” que lista todos los avances status='pendiente' con acción de aprobar/rechazar.

Métricas y barras de progreso ya se actualizan solo con aprobados.

6) Criterios de aceptación

Operario puede registrar avance y ver “En revisión”; no puede aprobar.

PM/Admin puede registrar (queda aprobado al instante) y aprobar/rechazar los de operarios.

Reportes / % avance solo suman avances aprobados.

Si no hay PM/Admin que apruebe, el avance queda pendiente (no distorsiona métricas).

(Opcional) Modo “doble firma estricta” (si querés SIEMPRE 2 personas)

Agregar flag:

DUAL_SIGNOFF_ALWAYS = True


En crear_avance nunca marcar aprobado al instante.

Agregar endpoint para confirmación del “otro lado”:

Si crea Operario → requiere PM/Admin apruebe.

Si crea PM/Admin → requiere Operario “Confirmar ejecución”.
Para esto, en vez de confirmed_by único, usá dos campos:

ALTER TABLE tarea_avances
  ADD COLUMN IF NOT EXISTS ok_operario_by INT NULL REFERENCES usuarios(id),
  ADD COLUMN IF NOT EXISTS ok_operario_at TIMESTAMP NULL,
  ADD COLUMN IF NOT EXISTS ok_pm_by INT NULL REFERENCES usuarios(id),
  ADD COLUMN IF NOT EXISTS ok_pm_at TIMESTAMP NULL;


Y status='aprobado' recién cuando ambos estén completos.

Esto encarece un poco; por ahora te dejé el flujo barato (solo PM/Admin aprueba a Operario).