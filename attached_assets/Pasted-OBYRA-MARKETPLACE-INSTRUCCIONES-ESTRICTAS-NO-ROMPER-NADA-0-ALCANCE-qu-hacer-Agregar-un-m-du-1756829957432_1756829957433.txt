OBYRA MARKETPLACE — INSTRUCCIONES ESTRICTAS (NO ROMPER NADA)
0) ALCANCE (qué hacer)

Agregar un módulo nuevo marketplace/ con todo lo del market B2B estilo ML.

No modificar ni eliminar módulos existentes (obras, presupuestos, inventario, etc.).

Seller masking total en público (home/search/product): mostrar “OBYRA Partner”.

Mostrar seller real recién en el carrito (y en checkout/orden del comprador).

Integración de pago (MP) con webhook que genera OC PDF por seller y envía emails.

1) REGLAS DURAS (cumplir SIEMPRE)

Trabajar en ruta nueva: marketplace/ únicamente (+ agregar blueprint en app.py).

Rutas del market namespaced:

API pública/privada: /api/market/*

Páginas del market: /market/*

Migración nueva que cree solo tablas del market (con prefijo mk_).

.env: agregar claves del market (no tocar otras).

2) ESTRUCTURA DE CARPETAS (nueva)
marketplace/
  __init__.py
  routes.py                 # Blueprints /api/market/* y /market/*
  models.py                 # SOLO tablas del market (prefijo mk_)
  services/
    masking.py              # enmascarado público
    commissions.py          # cálculo de comisiones
    po_pdf.py               # generación de OC en PDF
    emailer.py              # envío de emails
  templates/marketplace/    # (si hay SSR)
  static/marketplace/

3) ÚNICO CAMBIO EN app.py (registrar blueprint)

No borrar ni editar imports existentes. Agregar estas dos líneas:

from marketplace.routes import bp as marketplace_bp
app.register_blueprint(marketplace_bp, url_prefix="/")

4) MODELOS (aislados, prefijo mk_)

Crear marketplace/models.py con solo estas tablas:

mk_products(id, seller_company_id, name, category_id, description_html, is_masked_seller)

mk_product_variants(id, product_id, sku, price, currency)

mk_carts(id, buyer_company_id, buyer_user_id)

mk_cart_items(id, cart_id, variant_id, qty, price_snapshot, currency)

mk_orders(id, buyer_company_id, buyer_user_id, status, total, currency, billing_json, shipping_json, payment_status, payment_method, created_at)

mk_order_items(id, order_id, seller_company_id, variant_id, qty, unit_price, currency, tax_amount, commission_amount)

mk_payments(id, order_id, provider, provider_ref, status, paid_at, amount, currency)

mk_purchase_orders(id, order_id, seller_company_id, buyer_company_id, status, oc_number, pdf_url, sent_at)

mk_commissions(id, category_id, exposure, take_rate_pct) (mínimo viable: usar default si no hay registro)

Importante: NO referenciar ni renombrar tablas existentes.

5) MIGRACIÓN (solo market)

Crear una migración nueva (ej.: YYYY_MM_DD_marketplace_initial.py) que cree únicamente las tablas mk_*.

Prohibido: dropear/modificar tablas anteriores.

6) POLÍTICA DE MASKING (público)

Crear marketplace/services/masking.py:

MASKED = {"display": "OBYRA Partner"}
SCRUB_KEYS = {"seller","seller_name","seller_company_id","seller_id","seller_contact","store","vendor","emails","phones","addresses"}

def redact_public(obj):
    if isinstance(obj, dict):
        out = {}
        for k, v in obj.items():
            if k in SCRUB_KEYS:
                out[k] = MASKED if k == "seller" else None
            else:
                out[k] = redact_public(v)
        return out
    if isinstance(obj, list):
        return [redact_public(x) for x in obj]
    return obj


Usar siempre en endpoints públicos (/api/market/search, /api/market/products/:id).

7) ENDPOINTS — CONTRATO DE API
7.1 Público (enmascarado SIEMPRE)

GET /api/market/search?q=&cat=&brand=&attrs=&sort=
Respuesta:

{
  "items": [
    {
      "id": 123, "name": "Cemento 50kg",
      "price_from": 12999, "currency": "ARS",
      "seller": {"display": "OBYRA Partner"}
    }
  ],
  "facets": {}, "paging": {"total": 1}
}


GET /api/market/products/{id}
Respuesta:

{
  "id": 123, "name": "Cemento 50kg", "description_html": "...",
  "seller": {"display": "OBYRA Partner"},
  "variants": [{"id":1,"sku":"CEM50-001","price":12999,"currency":"ARS"}]
}

7.2 Autenticado (comprador) — seller real en carrito/checkout/orden

POST /api/market/cart/items → agrega ítem (persistir en mk_cart_items)

GET /api/market/cart → agrupar por seller y mostrar nombre real:

{
  "groups": [
    {
      "seller": {"id": 45, "name": "Proveedor Alfa"},
      "items": [{"variant_id":1,"qty":2,"price":12999,"currency":"ARS"}],
      "shipping_options": [{"id":"std","label":"48-72h","price":2999}]
    }
  ]
}


POST /api/market/checkout → crear mk_orders + mk_order_items con commission_amount por ítem; devolver {order_id, payment_url}.

POST /api/market/payments/mp/webhook

On approved:

mk_orders.status = 'paid', payment_status='approved'.

Generar 1 OC por seller (mk_purchase_orders) con PDF (ReportLab/WeasyPrint).

Enviar email a proveedor (con PDF) y comprador (confirmación).

GET /api/market/orders/{id} → detalle de orden (comprador) con seller real por ítem.

Backoffice/Seller portal: endpoints aparte, no públicos.

8) SERVICIOS (stubs mínimos)

services/commissions.py:

def compute(category_id: int, exposure: str, price: float, qty: int) -> float:
    base = 0.10
    if exposure == "premium": base += 0.02
    return round(price * qty * base, 2)


services/po_pdf.py:

def generate_po_pdf(oc_number: str, supplier_name: str, buyer_name: str, buyer_cuit: str, delivery_addr: str, items: list[dict]):
    # generar y devolver (public_url, abs_path) del PDF
    ...


services/emailer.py:

def send(to_email: str, subject: str, html: str, attachments=None):
    # usar SMTP configurado en .env (NO tocar el mailer global)
    ...

9) VARIABLES DE ENTORNO (agregar)
# Marketplace
MP_ACCESS_TOKEN=...
MP_WEBHOOK_PUBLIC_URL=https://<dominio>/api/market/payments/mp/webhook
STORAGE_DIR=./storage
BASE_URL=http://localhost:5000
SMTP_HOST=...
SMTP_PORT=587
SMTP_USER=...
SMTP_PASSWORD=...
FROM_EMAIL=OBYRA <notificaciones@obyra.com>

10) UI (reglas)

Público (home/search/product): renderizar componente “Vendido por OBYRA Partner”. Nunca mostrar nombre/ID del seller.

Carrito/Checkout/Orden (comprador): mostrar el nombre real del seller por grupo/ítem.

11) TESTS DE HUMO (copiar/pegar)
# Sistema general (no debe romper nada existente)
curl -sf http://localhost:5000/health

# Marketplace health
curl -sf http://localhost:5000/market/health

# Público enmascarado
curl -s "http://localhost:5000/api/market/search?q=cemento" | jq '..|.seller? // empty'
curl -s "http://localhost:5000/api/market/products/1" | jq

# Carrito (debe mostrar seller real)
curl -s "http://localhost:5000/api/market/cart" | jq

# Checkout (ejemplo)
curl -s -X POST http://localhost:5000/api/market/checkout \
  -H "Content-Type: application/json" \
  -d '{"cart_id":1,"buyer_user_id":1,"billing":{"company_id":2,"razon_social":"Demo SA","cuit":"30-11111111-9"},"shipping":{"tipo":"domicilio","direccion":"Caseros"}}' | jq

# Webhook aprobado (genera OCs + emails)
ORDER_ID=1
curl -s -X POST http://localhost:5000/api/market/payments/mp/webhook \
  -H "Content-Type: application/json" \
  -d "{\"order_id\": ${ORDER_ID}, \"status\":\"approved\", \"amount\":12999, \"payment_id\":\"demo123\"}" | jq

# Ver orden (seller real)
curl -s "http://localhost:5000/api/market/orders/${ORDER_ID}" | jq

12) CRITERIOS DE ACEPTACIÓN (QA)

 NO se modificó ni eliminó ningún módulo/archivo externo a marketplace/ (salvo el alta del blueprint en app.py).

 Migración nueva crea solo tablas mk_*.

 Público (/api/market/search, /api/market/products/:id) devuelve "seller":{"display":"OBYRA Partner"} y no incluye seller_company_id/name.

 Carrito/Checkout/Orden muestran seller real por ítem/grupo.

 checkout crea mk_orders + mk_order_items con commission_amount calculado.

 Webhook approved → status=paid, genera purchase_orders por seller con PDF, y envía emails a proveedor/comprador.

13) GUARDARRAÍLES (para evitar errores)

Trabajar en rama feature/marketplace.

PR debe cambiar solo marketplace/** y app.py (registro de blueprint).

Prohibido renombrar/eliminar rutas/módulos existentes.

Si se detecta una eliminación fuera de marketplace/, rollback inmediato.