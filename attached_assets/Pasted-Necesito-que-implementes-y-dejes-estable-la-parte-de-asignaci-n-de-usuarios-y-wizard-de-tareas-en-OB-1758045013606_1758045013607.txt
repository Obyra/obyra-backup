Necesito que implementes y dejes estable la parte de asignaci√≥n de usuarios y wizard de tareas en OBYRA IA.
Te paso todo el detalle dividido en pasos, issues y criterios.

1Ô∏è‚É£ HOTFIX ya aplicado (no tocar)

El formulario de ‚ÄúAsignar Usuario‚Äù ahora funciona con submit tradicional.

No volver a poner preventDefault() hasta que el AJAX est√© estable.

Si despu√©s quer√©s implementar AJAX, hacerlo en una rama separada (feature/ajax-asignar-usuario).

2Ô∏è‚É£ Wizard de creaci√≥n y asignaci√≥n de tareas
‚û°Ô∏è Objetivo general

Armar un flujo donde, desde el detalle de una obra:

Selecciono etapas

Veo lista de tareas sugeridas para esas etapas y tildo las que quiero

Para cada tarea: completo inicio, fin, horas, unidad, responsable (miembro de la obra)

Confirmo y se crean todas juntas, asignando responsables en el mismo paso.

‚û°Ô∏è Issues / PRs que necesitamos
Issue #1 ‚Äì Backend

T√≠tulo: feat(api): Wizard ‚Äì creaci√≥n masiva de tareas
Descripci√≥n: Implementar endpoint para crear varias tareas y asignar responsables en un solo paso.

Endpoint: POST /obras/<obra_id>/wizard/tareas

Body esperado:

{
  "etapas": [
    {
      "etapa_id": 12,
      "tareas": [
        {
          "nombre": "Construcci√≥n de muros exteriores",
          "inicio": "2025-09-20",
          "fin": "2025-09-27",
          "horas_estimadas": 40,
          "unidad": "h",
          "responsable_id": 6
        }
      ]
    }
  ],
  "evitar_duplicados": true
}


Respuesta:

{
  "ok": true,
  "creadas": 7,
  "ya_existian": 2,
  "asignaciones_creadas": 5
}


Reglas:

Upsert por (etapa_id, nombre) si evitar_duplicados es true.

Validar que responsable_id sea miembro de la obra.

Insertar en tabla tarea_miembros si viene responsable_id.

Todo en transacci√≥n.

Issue #2 ‚Äì Frontend/UI

T√≠tulo: feat(ui): Wizard Etapa ‚Üí Tareas ‚Üí Datos ‚Üí Confirmar
Descripci√≥n: Crear wizard en el detalle de obra con los siguientes pasos:

Paso 1: Seleccionar etapas (checkbox).

Paso 2: Tildar tareas sugeridas.

Paso 3: Completar tabla editable (inicio, fin, horas, unidad, responsable).

Paso 4: Resumen + Confirmar.

Validaciones:

Fechas obligatorias.

Horas > 0.

Responsable debe ser miembro.

Enviar todo el JSON al endpoint anterior.

Al confirmar:

Mostrar loading.

Si ok:true, cerrar wizard y refrescar tareas.

Permisos: visible solo para admin/pm.

Issue #3 ‚Äì QA

T√≠tulo: qa: Wizard de tareas y asignaci√≥n
Descripci√≥n: Validar end-to-end el flujo.
Criterios de aceptaci√≥n:

Se pueden crear tareas nuevas desde wizard.

Si ya exist√≠an, responde ya_existian sin duplicar.

Asigna responsables correctamente.

Todo queda visible en lista de tareas y en ‚ÄúEquipo Asignado‚Äù.

No rompe asignaciones manuales.

Respuesta JSON correcta y UI actualiza sin refresco forzado.

3Ô∏è‚É£ Ajustes en modelos y tablas (ya corregidos)

Tabla obra_miembros: columnas finales

id | obra_id | usuario_id | rol_en_obra | etapa_id | created_at


Modelo ObraMiembro debe usar usuario_id (no user_id).

Tabla tarea_miembros: tarea_id, usuario_id, cuota_objetivo con constraint √∫nico (tarea_id, usuario_id).

4Ô∏è‚É£ QA r√°pido (despu√©s de merge)

Asignar un usuario a la obra ‚Üí debe aparecer en ‚ÄúEquipo Asignado‚Äù.

Abrir wizard:

Seleccionar una etapa.

Tildar 2 tareas.

Completar datos (fechas, horas, unidad, responsable).

Guardar.

Confirmar que:

Tareas aparecen con responsable.

En Network aparece POST /obras/<id>/wizard/tareas con el payload correcto.

Respuesta tiene ok:true.

5Ô∏è‚É£ Notas finales

Mantener logs claros en backend (logger.info).

En UI, mostrar errores legibles si falla validaci√≥n o DB.

No mezclar c√≥digo de wizard con otras features en el mismo PR.

üí° Resumen para t√≠tulo del PR final (una vez mergeado backend+UI):

feat(wizard): flujo Etapas ‚Üí Tareas ‚Üí Datos ‚Üí Confirmar con asignaci√≥n masiva