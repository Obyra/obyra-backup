Objetivo: Habilitar “Gestión de Usuarios” con alta/edición segura y roles (admin, pm, operario). El alta NO debe volver a tirar 500.

1) Migración mínima (idempotente)
-- columna role con default y not null
ALTER TABLE usuarios ADD COLUMN IF NOT EXISTS role VARCHAR(20);
UPDATE usuarios SET role = COALESCE(role, 'operario');
ALTER TABLE usuarios ALTER COLUMN role SET DEFAULT 'operario';
ALTER TABLE usuarios ALTER COLUMN role SET NOT NULL;

-- si usuarios.organizacion_id es NOT NULL, vamos a setearla desde backend con la del admin actual

2) Rutas backend (Flask) bajo “Equipos”

Crear en el blueprint que maneja “Equipos/Usuarios” estas rutas:

# GET: listado
@app.get("/equipo/usuarios")
@login_required
@require_role(["admin","pm"])  # helper que ya tenemos o simple chequeo current_user.role
def usuarios_listar():
    users = Usuario.query.order_by(Usuario.id.desc()).all()
    return render_template("equipo/usuarios.html", users=users)

# POST: crear
@app.post("/equipo/usuarios")
@login_required
@require_role(["admin","pm"])
def usuarios_crear():
    f = request.form
    role = (f.get("role") or "operario").strip()
    org_id = getattr(current_user, "organizacion_id", None)
    u = Usuario(
        nombre=f.get("nombre","").strip(),
        apellido=f.get("apellido","").strip(),
        email=f.get("email","").lower().strip(),
        role=role,
        organizacion_id=org_id,
        password_hash=generate_password_hash(f.get("password","").strip()),
        auth_provider="manual",
    )
    db.session.add(u)
    try:
        db.session.commit()
        return jsonify(ok=True)
    except IntegrityError:
        db.session.rollback()
        return jsonify(ok=False, error="El email ya existe"), 400

# POST: cambiar rol
@app.post("/equipo/usuarios/<int:uid>/rol")
@login_required
@require_role(["admin","pm"])
def usuarios_cambiar_rol(uid):
    u = Usuario.query.get_or_404(uid)
    u.role = request.form.get("role","operario")
    db.session.commit()
    return jsonify(ok=True)


Si no existe require_role, usar un chequeo simple:

if current_user.role not in ("admin","pm"): abort(403)

3) Template simple templates/equipo/usuarios.html

Tabla + modal de alta. (Sin estilos raros; usar Bootstrap que ya está.)

<h4 class="mb-3">Gestión de Usuarios</h4>

<button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#modalNuevo">
  + Nuevo Usuario
</button>

<table class="table table-sm align-middle">
  <thead><tr>
    <th>Nombre</th><th>Email</th><th>Rol</th><th></th>
  </tr></thead>
  <tbody>
    {% for u in users %}
    <tr>
      <td>{{ u.nombre }} {{ u.apellido }}</td>
      <td>{{ u.email }}</td>
      <td>
        <form class="d-flex gap-2" onsubmit="return setRol(event, {{u.id}})">
          <select class="form-select form-select-sm" name="role">
            <option value="operario" {{'selected' if u.role=='operario'}}>Operario</option>
            <option value="pm" {{'selected' if u.role=='pm'}}>PM</option>
            <option value="admin" {{'selected' if u.role=='admin'}}>Admin</option>
          </select>
          <button class="btn btn-sm btn-outline-secondary">Guardar</button>
        </form>
      </td>
      <td></td>
    </tr>
    {% endfor %}
  </tbody>
</table>

<!-- Modal nuevo -->
<div class="modal fade" id="modalNuevo" tabindex="-1">
  <div class="modal-dialog">
    <form class="modal-content" id="frmNuevo">
      <div class="modal-header"><h5 class="modal-title">Nuevo usuario</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="row g-2">
          <div class="col-md-6"><input class="form-control" name="nombre" placeholder="Nombre" required></div>
          <div class="col-md-6"><input class="form-control" name="apellido" placeholder="Apellido"></div>
          <div class="col-12"><input class="form-control" type="email" name="email" placeholder="Email" required></div>
          <div class="col-12"><input class="form-control" type="password" name="password" placeholder="Contraseña" required></div>
          <div class="col-12">
            <label class="form-label">Rol</label>
            <select class="form-select" name="role">
              <option value="operario" selected>Operario</option>
              <option value="pm">PM</option>
              <option value="admin">Admin</option>
            </select>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-outline-secondary" data-bs-dismiss="modal" type="button">Cancelar</button>
        <button class="btn btn-primary" type="submit">Crear</button>
      </div>
    </form>
  </div>
</div>

<script>
async function setRol(e, uid){
  e.preventDefault();
  const fd = new FormData(e.target);
  const r = await fetch(`/equipo/usuarios/${uid}/rol`, {method:'POST', body:fd});
  const j = await r.json();
  if(!j.ok) return alert(j.error||'Error');
  location.reload();
}

document.getElementById('frmNuevo')?.addEventListener('submit', async (e)=>{
  e.preventDefault();
  const fd = new FormData(e.target);
  const r = await fetch('/equipo/usuarios', {method:'POST', body:fd});
  const j = await r.json();
  if(!j.ok) return alert(j.error||'No se pudo crear');
  location.reload();
});
</script>

4) Mostrar el menú

Asegurarse de que el dropdown “Equipos → Gestión de Usuarios” apunte a /equipo/usuarios y solo lo vea admin/pm:

{% if current_user.role in ['admin','pm'] %}
  <a class="dropdown-item" href="{{ url_for('usuarios_listar') }}">Gestión de Usuarios</a>
{% endif %}

Criterios de aceptación

Puedo abrir Equipos → Gestión de Usuarios y ver tabla de usuarios.

Crear usuario funciona sin 500 (si el email existe, muestra error legible).

Puedo cambiar rol desde el selector y se guarda.

Solo admin/pm acceden a esta pantalla; operario no la ve en el menú.

Los usuarios nuevos quedan con role='operario' si no se elige otro.