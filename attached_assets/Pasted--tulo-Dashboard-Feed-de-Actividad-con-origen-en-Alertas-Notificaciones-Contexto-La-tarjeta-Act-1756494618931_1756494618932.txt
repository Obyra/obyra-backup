ítulo: Dashboard – Feed de Actividad con origen en Alertas/Notificaciones

Contexto:
La tarjeta “Actividad Reciente” hoy muestra un placeholder. A la derecha ya existe “Alertas y Notificaciones” con items (severidad, título, descripción, obra). Queremos que Actividad Reciente liste, en modo feed, los mismos eventos que se van generando/seleccionando en Alertas (y futuros eventos de obra).

Objetivo técnico:
Renderizar un feed cronológico (últimos 25) con los eventos del sistema (alertas nuevas, cambios de estado de obra, hitos, etc.), con filtros y paginación.

Stack/ámbito: Frontend (React/Vite/Tailwind/shadcn) + Backend (Flask + SQLAlchemy + JWT) + DB (Postgres).

Cambios exactos:

DB / Modelo (nuevo):

Tabla events

id (PK), company_id (FK), project_id (FK, nullable),

type (enum: alert, milestone, delay, cost_overrun, stock_low, status_change, custom),

severity (enum: baja, media, alta, critica, nullable),

title (text), description (text),

meta (JSONB),

created_at (tz), created_by (FK users, nullable).

Índices: company_id, created_at desc; project_id; type.

Backend / API (nuevo):

GET /api/events?limit=25&offset=0&project_id=&type=&severity=

Auth por JWT; filtra por company_id del usuario.

Respuesta ordenada por created_at desc.

Hook de creación de eventos cuando se crea una alerta (alerts), se marca un hito o cambia el estado de una obra: disparar insert into events (usar service events_service.py).

(Opcional) POST /api/events/custom para registrar eventos manuales (solo role=admin_empresa).

Frontend / UI:

Componente RecentActivityCard reemplaza placeholder por lista:

Ítem con: badge de severidad, title, description (1–2 líneas), project (link a /obras/:id), created_at relativo (“hace 2h”).

Filtros arriba (dropdown): Todos, Alertas, Hitos, Cambios de estado; severidad Todas/Alta/Crítica.

Paginación “Cargar más”.

Fuente de datos: GET /api/events.

Si el usuario selecciona una alerta a la derecha, se destaca el item correspondiente en Actividad (scrollIntoView + highlight).

Estado vacío con ilustración si no hay eventos.

Reglas de negocio / permisos:

Usuarios ven solo eventos de su company_id.

custom events solo admin de empresa.

Errores & logs:

401/403 para accesos cruzados.

400 si filtros inválidos.

Log en events_service al crear desde otros módulos.

Migraciones (Alembic):

Crear tabla events + enums; índices mencionados.

Aceptación (QA):

 Crear una alerta → aparece en Actividad en <5s (polling 15s o refresh manual).

 Seleccionar una alerta en la derecha resalta el mismo evento en Actividad.

 Filtros y paginación funcionan.

 Usuarios de otra empresa no ven eventos ajenos.

 Tests: 1 backend (listar por company) + 1 frontend (render y filtros).

Entregables:

PR con migración Alembic, endpoints, componente React y GIF de la tarjeta funcionando.

2) Acciones Rápidas – Generar Reporte (PDF)

Título: Dashboard – Botón “Generar Reporte” con exportación a PDF

Contexto:
En “Acciones Rápidas” falta que el botón Generar Reporte cree un PDF descargable.

Objetivo técnico:
Exportar un informe PDF con métricas del dashboard y obras activas (resumen de KPI + alertas recientes), con filtros básicos.

Stack/ámbito: Frontend + Backend + PDF server-side (WeasyPrint o ReportLab; preferible WeasyPrint por HTML+CSS).

Cambios exactos:

Backend / API (nuevo):

POST /api/reports/dashboard

Body (JSON, opcional):

{
  "range": "last_30d",
  "include_alerts": true,
  "project_ids": [1,2],
  "locale": "es-AR",
  "currency": "ARS"
}


Respuesta: application/pdf (stream / attachment) con nombre obyra-dashboard-YYYYMMDD.pdf.

Service reports_service.py

Obtiene KPIs (obras activas, costo total, avance promedio, personal activo).

Incluye top 10 alertas recientes (titulo, severidad, obra, fecha).

Incluye listado corto de “Obras activas” (nombre, dirección, estado, % avance, costo resumido).

Renderiza HTML (Jinja2) → PDF (WeasyPrint).

Validaciones: company_id por JWT; project_ids deben pertenecer a la empresa.

Frontend / UI:

En Acciones Rápidas, botón “Generar Reporte”.

Abre modal con opciones: Rango (Últimos 7/30/90 días), Incluir alertas (toggle), Seleccionar obras (multiselect con búsqueda), moneda.

Al confirmar, POST /api/reports/dashboard y dispara descarga.

Loader + toast de éxito o error.

Reutilizar KPIs ya presentes para mostrar un preview mínimo (opcional).

Formato del PDF:

Portada: logo OBYRA, nombre de la empresa, rango de fechas.

Sección KPIs (4 cards): Obras activas, Costo total, Avance promedio, Personal activo.

Sección “Alertas recientes” (tabla con severidad badge).

Sección “Obras activas” (tabla resumida con % avance y estado).

Footer: fecha de generación, usuario solicitante, página X/Y.

Estilos con CSS embebido para que WeasyPrint respete brand (tipografías seguras).

Seguridad & permisos:

Solo usuarios autenticados de la empresa; role=admin_empresa y role=gestor pueden exportar.

Rate limit 10/min por usuario para evitar abuso.

Errores & logs:

400 si project_ids no pertenecen a la empresa.

500 si falla el render PDF (log stacktrace y devolver error: pdf_render_failed).

Dependencias:

Añadir weasyprint (y fuentes básicas). Si hay restricciones, alternativa reportlab.

Incluir plantilla templates/reports/dashboard.html.

Aceptación (QA):

 Descargar PDF con datos correctos según filtros.

 El archivo abre en cualquier visor PDF.

 Tiempos de respuesta aceptables (<3s en dataset chico).

 Tests: 1 backend (status 200 + headers correctos), 1 frontend (mock de descarga).

Entregables:

PR con endpoint, template Jinja2, modal UI, e instrucciones para probar (comandos, variables de entorno si aplica)