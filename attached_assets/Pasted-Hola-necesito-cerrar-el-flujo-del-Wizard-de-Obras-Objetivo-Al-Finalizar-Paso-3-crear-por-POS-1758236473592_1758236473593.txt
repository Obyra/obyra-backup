Hola, necesito cerrar el flujo del Wizard de Obras:

Objetivo: Al “Finalizar” (Paso 3) crear por POST y pasar a Paso 4. Al “Confirmar” (Paso 4) no volver a Paso 2; cerrar el modal (o quedarse en el resumen).

Cambios:

En static/js/wizard.js (o equivalente) implementar:

installFinishInterceptor()

Clonar #wizard-finish, remover href, data-bs-toggle, data-action.

click: validar → collectPaso3Payload() → POST /obras/api/wizard/bulk-create (JSON {ok:true}) → gotoPaso(4).

installConfirmInterceptor()

Clonar #wizard-confirm, remover href, data-bs-toggle, data-action.

click: preventDefault() y cerrar el modal (bootstrap.Modal.getOrCreateInstance('#wizard-modal').hide()), sin navegar a Paso 2.

Llamar a ambas en el init del wizard y agregar neutralizarRebotesLegacy() que quite cualquier href="#paso2" de tabs y bloquee hashchange a #paso2.

Verificar que ningún handler legacy haga gotoPaso(2) tras finalizar/confirmar. Búsquedas:

rg -n 'gotoPaso\\(2\\)|#paso2|wizardPaso2|Aplicando catálogo' static templates


Remover/neutralizar coincidencias que afecten el flujo de Finalizar/Confirmar.

Backend: el endpoint POST /obras/api/wizard/bulk-create debe responder JSON {ok:true} (no render de Paso 2).

No tocar: Paso 2 (ya usa catálogo) y el placeholder del select “Asignado a” en Paso 3.

🧪 (Opcional) Parche rápido para probar en consola

Si querés testear ahora sin esperar commit, pegá esto en la consola con el modal abierto (no queda persistente):

(function(){
  function collectPaso3Payload(){
    const obraId = Number(document.querySelector("#wizard-obra-id")?.value || 0);
    const rows = [...document.querySelectorAll("#wizard-step3 tbody tr")];
    const tareas = rows.map(tr => ({
      tarea_id: Number(tr.dataset.tid || tr.getAttribute('data-tid') || 0),
      inicio: tr.querySelector('.fecha-inicio')?.value || null,
      fin: tr.querySelector('.fecha-fin')?.value || null,
      horas_est: Number(tr.querySelector('.horas-est')?.value || 0),
      cantidad: Number(tr.querySelector('.cantidad')?.value || 0),
      unidad: tr.querySelector('.unidad-select')?.value || "",
      asignado_id: Number(tr.querySelector('.usuario-select')?.value || 0),
      prioridad: tr.querySelector('.prioridad-select')?.value || "Med"
    }));
    return { obra_id: obraId, tareas };
  }

  function installFinishInterceptor(){
    const oldBtn = document.querySelector('#wizard-finish');
    if(!oldBtn) return;
    const b = oldBtn.cloneNode(true);
    ['href','data-bs-toggle','data-bs-target','data-action'].forEach(a=>b.removeAttribute(a));
    oldBtn.replaceWith(b);
    b.addEventListener('click', async (ev)=>{
      ev.preventDefault(); ev.stopPropagation(); ev.stopImmediatePropagation?.();
      const payload = collectPaso3Payload();
      const r = await fetch('/obras/api/wizard/bulk-create', {
        method:'POST', headers:{'Content-Type':'application/json'}, credentials:'same-origin',
        body: JSON.stringify(payload)
      });
      const j = await r.json();
      if(j.ok){ window.gotoPaso?.(4); } else { alert(j.error||'No se pudo finalizar'); }
    }, {capture:true});
  }

  function installConfirmInterceptor(){
    const oldBtn = document.querySelector('#wizard-confirm');
    if(!oldBtn) return;
    const b = oldBtn.cloneNode(true);
    ['href','data-bs-toggle','data-bs-target','data-action'].forEach(a=>b.removeAttribute(a));
    oldBtn.replaceWith(b);
    b.addEventListener('click', (ev)=>{
      ev.preventDefault(); ev.stopPropagation(); ev.stopImmediatePropagation?.();
      const m = document.querySelector('#wizard-modal');
      if(m){ try{ bootstrap.Modal.getOrCreateInstance(m).hide(); }catch(e){} }
    }, {capture:true});
  }

  function neutralizarRebotesLegacy(){
    document.querySelectorAll('a[href="#paso2"], a[href="#wizardPaso2"]').forEach(a=>{
      a.removeAttribute('href');
      a.addEventListener('click', e=>{ e.preventDefault(); e.stopPropagation(); }, {capture:true});
    });
    window.addEventListener('hashchange', (e)=>{
      if(/paso2/i.test(location.hash)){ history.replaceState(null,'','#'); e.stopImmediatePropagation?.(); }
    }, {capture:true});
  }

  installFinishInterceptor();
  installConfirmInterceptor();
  neutralizarRebotesLegacy();
  console.log('✅ Interceptores instalados (sesión actual)');
})();