Tarea: Arreglar “Error de conexión al asignar usuarios” y que la asignación funcione end-to-end.

Contexto: El modal “Asignar usuarios” hoy falla con un pop-up “Error de conexión…”. Necesitamos que el POST procese multipart/form-data, respete sesión/CSRF y devuelva JSON.

1) Frontend (modal Asignar)

Reemplazar el submit por fetch con FormData y credentials:'include' (no setear Content-Type).

Asegurar que se envían exactamente estos campos:

tarea_ids[] (uno o varios)

user_ids[] (uno o varios)

cuota_objetivo (opcional)

si usamos Flask-WTF: csrf_token

El endpoint debe venir de form.action y ser POST a /obras/asignar-usuarios.

Esperar JSON y, si ok===true, refrescar las badges de asignados en las tarjetas.

Snippet de referencia (usar o adaptar):

const form = document.getElementById('asignarUsuariosForm');
form.addEventListener('submit', async (e) => {
  e.preventDefault();
  const fd = new FormData(form);
  const resp = await fetch(form.action, { method: 'POST', body: fd, credentials: 'include' });
  const data = await resp.json();
  if (!resp.ok || data.ok === false) throw new Error(data.error || `HTTP ${resp.status}`);
  // TODO: refrescar UI (badges) y cerrar modal
});

2) Backend (Flask)

Implementar/ajustar POST /obras/asignar-usuarios para leer form-data:

request.form.getlist('tarea_ids[]')

request.form.getlist('user_ids[]')

request.form.get('cuota_objetivo', type=int)

Hacer upsert de asignaciones (evitar duplicados) y commit.

No redirigir ni renderizar HTML. Responder JSON con códigos correctos.

Handler de referencia:

@obras_bp.post('/obras/asignar-usuarios')
def bulk_asignar():
    try:
        tarea_ids = request.form.getlist('tarea_ids[]')
        user_ids  = request.form.getlist('user_ids[]')
        cuota     = request.form.get('cuota_objetivo', type=int)
        if not tarea_ids or not user_ids:
            return jsonify(ok=False, error='Faltan tareas o usuarios'), 400
        creados = upsert_asignaciones(tarea_ids, user_ids, cuota)  # implementar
        return jsonify(ok=True, creados=creados)
    except Exception as e:
        current_app.logger.exception('bulk_asignar')
        return jsonify(ok=False, error=str(e)), 500

3) CSRF / Auth

Si hay Flask-WTF, incluir {{ csrf_token() }} en el form y agregarlo al FormData.

Verificar que la ruta no haga redirect() a /login. Si la sesión es requerida, el fetch debe incluir cookies (ya pedido con credentials:'include').

4) Logs útiles

Loguear usuario actual y arrays recibidos:

logger.info("bulk_asignar user=%s tareas=%s users=%s", current_user.id, tarea_ids, user_ids)

Loguear errores con logger.exception.

5) Criterios de aceptación

En DevTools → Network la request a /obras/asignar-usuarios devuelve 200 y Content-Type: application/json.

Las tarjetas muestran badges con los usuarios asignados sin recargar toda la página (o recargando, pero se ven).

Al loguear como momi giardina (operario), en /obras/mis-tareas aparecen las tareas asignadas.

Reintentos idempotentes no crean duplicados.

6) Prueba rápida

Seleccionar 2–3 tareas de “Revoque Fino”.

Abrir modal, elegir momi giardina, cuota 50, “Asignar”.

Ver en Network respuesta {"ok": true, "creados": N}.

Ver badges en tarjetas y listado en Mis Tareas de momi.