Contexto

Mantener arquitectura actual (Flask + Jinja2 + SQLAlchemy + Alembic). Reusar autenticación/roles existentes y estilos UI del dashboard.

Objetivo

Módulo Equipos: alta/edición, asignación a obras, partes de uso (horas/m²/m³), mantenimiento, adjuntos, aprobación de partes.

Módulo Inventario: items/categorías, depósitos, stock por depósito, movimientos (ingreso/egreso/transferencia/ajuste), reservas por obra, alertas de stock bajo.

Nota: Exponer también endpoints JSON paralelos (mismo blueprint) para facilitar una migración a SPA más adelante (Accept: application/json).

Modelos (SQLAlchemy) y migraciones (Alembic)
Equipos

equipment
id, company_id, nombre, tipo, marca, modelo, nro_serie, costo_hora NUMERIC(12,2), estado ENUM('activo','baja','mantenimiento'), created_at

equipment_assignment
id, equipment_id FK, project_id FK, fecha_desde, fecha_hasta NULL, estado ENUM('asignado','liberado')

equipment_usage
id, equipment_id FK, project_id FK, fecha, horas DECIMAL(6,2), avance_m2 DECIMAL(12,2) NULL, avance_m3 DECIMAL(12,2) NULL, notas TEXT, user_id FK, estado ENUM('pendiente','aprobado','rechazado')

maintenance_task
id, equipment_id FK, tipo ENUM('programado','correctivo'), fecha_prog, fecha_real NULL, costo NUMERIC(12,2) NULL, notas TEXT, status ENUM('abierta','en_proceso','cerrada')

maintenance_attachment
id, maintenance_task_id FK, file_url, filename, uploaded_by, created_at

Inventario

inventory_category
id, company_id, nombre, parent_id NULL

inventory_item
id, company_id, sku UNIQUE, nombre, categoria_id FK, unidad (ej: 'kg','m','u'), min_stock DECIMAL(12,2) DEFAULT 0, descripcion TEXT

warehouse
id, company_id, nombre, direccion

stock
id, item_id FK, warehouse_id FK, cantidad DECIMAL(14,3) DEFAULT 0

stock_movement
id, item_id FK, tipo ENUM('ingreso','egreso','transferencia','ajuste'), qty DECIMAL(14,3), origen_warehouse_id FK NULL, destino_warehouse_id FK NULL, project_id FK NULL, motivo TEXT, user_id FK, fecha

stock_reservation
id, item_id FK, project_id FK, qty DECIMAL(14,3), estado ENUM('activa','liberada','consumida'), created_at

Tareas de migración

Crear migración Alembic para las tablas nuevas.

Índices: equipment_assignment (project_id), stock (item_id, warehouse_id UNIQUE), stock_movement (item_id, fecha), inventory_item (sku, nombre text pattern ops).

Blueprints y rutas
Blueprint: equipos (/equipos)

SSR (HTML)

GET /equipos → listado + filtros (proyecto, estado, tipo).

GET /equipos/nuevo · POST /equipos/nuevo

GET /equipos/<id> → ficha (datos, asignaciones, uso, mantenimiento).

GET /equipos/<id>/editar · POST /equipos/<id>/editar

POST /equipos/<id>/asignar (form: proyecto, fecha_desde)

POST /equipos/<id>/liberar (cierra asignación vigente)

POST /equipos/<id>/uso (parte: fecha, horas, m2/m3, notas)

POST /equipos/uso/<uso_id>/aprobar · POST /equipos/uso/<uso_id>/rechazar

POST /equipos/<id>/mantenimiento/nuevo

POST /equipos/mantenimiento/<m_id>/adjunto (upload)

JSON (mismos recursos)

Si Accept: application/json o ?format=json → devolver JSON (lista, ficha, crear/patch, etc.) con validaciones y errores estándar.

Permisos

@login_required + decorator por roles:

crear/editar/asignar: admin_empresa, jefe_obra

aprobar/rechazar uso: admin_empresa, jefe_obra

carga uso: jefe_obra, compras, operario (si existe)

Blueprint: inventario (/inventario)

SSR

GET /inventario → Items (tabla), filtros por categoría, buscador.

GET /inventario/items/nuevo · POST /inventario/items/nuevo

GET /inventario/items/<id> · POST /inventario/items/<id>/editar

GET /inventario/warehouses · POST /inventario/warehouses/nuevo

GET /inventario/stock?warehouse_id=&item_id=

GET /inventario/movimientos (lista)

POST /inventario/movimientos (form único con select tipo)

Reglas:

ingreso/egreso: afecta un solo warehouse

transferencia: resta en origen y suma en destino (transacción)

ajuste: motivo obligatorio

GET /inventario/alertas (stock bajo)

POST /inventario/reservas (item, proyecto, qty)

POST /inventario/reservas/<id>/(liberar|consumir)

JSON

Misma lógica que Equipos (soporte JSON paralelo).

Permisos

compras, admin_empresa para movimientos y alta items; lectura para jefe_obra.

Templates (Jinja2)

Equipos

templates/equipos/list.html (tabla + filtros + badges estado)

templates/equipos/form.html (alta/edición)

templates/equipos/detail.html

pestañas: Resumen | Asignaciones | Uso | Mantenimiento

modales: “Nuevo parte de uso”, “Nueva tarea de mantenimiento”, “Subir adjunto”

Inventario

templates/inventario/items_list.html

templates/inventario/item_form.html

templates/inventario/warehouses.html

templates/inventario/stock.html (por depósito, total empresa)

templates/inventario/movimientos.html (form + lista)

templates/inventario/alertas.html

Reusar componentes de estilos del dashboard (cards, badges, progress).

Lógica clave

Equipos

Un equipo puede tener 0..1 asignación activa. Validar al asignar.

equipment_usage.estado inicia en pendiente → aprobaciones cambian estado.

Al aprobar un uso, emitir entrada en audit_log.

Inventario

Mantener consistencia de stock con transacciones DB.

Transferencia: dos movimientos atómicos + actualizar ambos stock.

Alertas: stock.cantidad < item.min_stock.

Reserva: baja virtual (no toca stock), impedir movimientos que dejen cantidad - reservas_activas < 0 (si aplicamos ese control).

Integraciones UI existentes

Dashboard: sumar KPIs rápidos:

“Uso de equipos hoy”, “Equipos en mantenimiento”, “Stock bajo”.

Obra: en detalle de obra, pestañas “Equipos” y “Inventario (reservas y consumos)”.

Archivos a crear / tocar

app/blueprints/equipos/__init__.py, routes.py, forms.py

app/blueprints/inventario/__init__.py, routes.py, forms.py

app/models/equipos.py, app/models/inventario.py

app/templates/equipos/*.html, app/templates/inventario/*.html

migrations/versions/<timestamp>_equipos_inventario.py

Menú: activar entradas “Equipos” y “Inventario”.

Seed (comando de utilidad)

Comando flask seed_equipos_inventario que:

Cree 1–2 depósitos demo.

10 items (cemento, hierro, ladrillos, EPP) + stock.

3 equipos (hormigonera, guinche, martillo demoledor), 1 asignado a obra demo.

5 movimientos varios + 2 partes de uso pendientes.

Validaciones & Seguridad

CSRF en formularios (Flask-WTF).

Decorators de rol en rutas mutables.

Límite de tamaño y tipo de archivo en adjuntos (PDF/JPG/PNG, 10 MB).

Endpoints JSON (ejemplo de patrón)

Si request.accept_mimetypes['application/json'] >= text/html o ?format=json, retornar JSON (paginado) con {"data":[...],"meta":{...}}.

Errores como {"error":"...", "fields":{...}} con códigos HTTP adecuados.

Hecho/Aceptación

CRUDs completos y vistas Jinja2 funcionando.

Reglas de negocio arriba detalladas.

KPIs y alertas reflejadas en Dashboard.

Seed usable y README con instrucciones.

Tests básicos: creación de movimiento, transferencia, parte de uso + aprobación.