Lo que está fallando

Paso 2 muestra “Error cargando tareas” aunque el paso 1 crea las etapas y el preview dice “exitoso”.

En consola veo el log “Auto-advance preview exitoso, navegando al paso 2” y window.WIZARD.etapa_ids con IDs, pero no se renderiza el listado de tareas.

También sigue apareciendo el warning “No se encontró función de navegación para el wizard”.

Lo que necesito que arregles

Usar SIEMPRE el endpoint con prefijo /obras
Asegurate de que todas las llamadas del wizard usen:

POST /obras/api/obras/:obra_id/etapas/bulk_from_catalog

POST /obras/api/wizard-tareas/preview

POST /obras/api/wizard-tareas/create
y que no quede ningún llamado legacy a rutas sin /obras (ej: /api/wizard-tareas/preview), porque eso devuelve HTML de error y dispara los “Unexpected token ‘<’”.

Respuesta JSON del preview con el esquema que espera el frontend
El POST /obras/api/wizard-tareas/preview debe responder Content-Type: application/json y el siguiente shape (ejemplo):

{
  "ok": true,
  "obra_id": 18,
  "etapas": [
    {
      "etapa_id": 153,
      "etapa_nombre": "Mampostería",
      "tareas_catalogo": [
        {"codigo":"…","nombre":"…"},
        {"codigo":"…","nombre":"…"}
      ],
      "tareas_existentes": []
    }
  ]
}


Si hay error, responder 200 o 4xx con JSON, por ejemplo:

{"ok": false, "error": "detalle legible"}


Persistir el estado del preview y renderizar Paso 2 desde ahí
Después de un 200 ok del preview:

Guardar exactamente window.WIZARD.preview = <respuesta JSON>.

Renderizar el Paso 2 desde window.WIZARD.preview (no volver a pedir nada ni re-llamar un endpoint sin /obras).

El mensaje “Error cargando tareas” solo debe mostrarse si ok=false (y mostrar el texto real de error).

Sincronizar los IDs de etapas
Tras bulk_from_catalog, guardar la lista real de IDs en:

window.WIZARD.etapa_ids = [...creadas+existentes]
Así, al presionar Siguiente o al auto-avanzar, el payload del preview sea:

{"obra_id": <id>, "etapa_ids": [ ... ]}


(Hoy window.WIZARD.etapa_ids a veces queda undefined y el preview falla con “etapa_ids requeridos”.)

Función global de navegación
Exponer un alias global para avanzar de paso, para que desaparezca el warning:

window.gotoPaso(step) que delega al método real del wizard.
El Paso 1, después del preview ok, debe llamar esa función para ir al Paso 2.

Nada de HTML en errores de API
Para cualquier 401/404/500 sobre rutas /obras/api/..., no redirigir a login ni devolver HTML; devolver siempre JSON como en el punto 2.

Cómo lo validamos (checklist rápido)

Abrir wizard → tildar 1–2 etapas → en consola:

window.WIZARD.etapa_ids devuelve un array de IDs numéricos.

window.WIZARD.preview existe y tiene etapas[0].tareas_catalogo.

En Network:

Hay un solo POST /obras/api/wizard-tareas/preview con payload {"obra_id":…, "etapa_ids":[…]} y 200 JSON.

El Paso 2 muestra las tareas en la UI (sin “Error cargando tareas”).

Si hay un error de backend, se ve el mensaje JSON real en el contenedor de errores del Paso 2 (no genérico).

No aparece más el warning “No se encontró función de navegación”.

El botón Siguiente avanza con normalidad.