Objetivo:

Arreglar el error gotoPaso is not defined.

Mantener auto-avance del Paso 1 (al tildar etapas se crea/recu, guarda WIZARD.etapa_ids y pasa a Paso 2).

“Siguiente” hace lo mismo.

Mostrar errores reales en #wizardPaso1Warning.

No dejar controles bloqueados.

1) Normalizar función de navegación

En el archivo del wizard (donde está nuestro JS), antes de llamar a gotoPaso(2), agregá este “alias”:

// === Adapter de navegación de pasos ===
(function(){
  // Si existe una función propia del wizard, usala como gotoPaso
  if (typeof window.gotoPaso !== 'function') {
    if (typeof window.goToStep === 'function') {
      window.gotoPaso = window.goToStep;
    } else if (typeof window.wizardGoToStep === 'function') {
      window.gotoPaso = window.wizardGoToStep;
    } else if (typeof window.nextStep === 'function') {
      // Fallback: avanzar una vez si no hay API por número
      window.gotoPaso = function(step){
        // si hay variable global, actualizala si aplica
        if (typeof window.wizardPasoActual === 'number' && step > window.wizardPasoActual) {
          while (window.wizardPasoActual < step) { window.nextStep(); }
        } else {
          window.nextStep();
        }
      };
    } else {
      console.warn('No se encontró función de navegación; dejá gotoPaso para debug.');
      window.gotoPaso = function(){ /* noop para evitar crash */ };
    }
  }
})();


Alternativa (si preferís directo): reemplazá todas las llamadas a gotoPaso(…) por el nombre real que use el wizard (por ej. goToStep(…)). Pero el adapter de arriba te evita tocar más lados.

2) Delegación de eventos y auto-avance (confirmar IDs)

El contenedor del grid del catálogo debe tener id wizardPaso1Container.

El modal debe tener id wizardModal (o actualizá el JS al id real si es wizardTareasModal).

Asegurate de tener el contenedor de error:

<div id="wizardPaso1Warning" class="text-danger small mt-2"></div>

3) Handlers (con delegación) — usar estas líneas

Dejá lo que ya agregamos, pero reemplazá la llamada que hacía gotoPaso(2) por el adapter de arriba y asegurate de escuchar cambios con delegación:

// Auto-aplicar y avanzar (la función applyCatalogAndAdvance ya existe)
document.getElementById('wizardPaso1Container')?.addEventListener('change', (ev)=>{
  if(!ev.target.matches('.etp, .catalog-checkbox')) return;
  clearTimeout(window.__wdeb);
  window.__wdeb = setTimeout(applyCatalogAndAdvance, 300);
});

// Botón verde (opcional) hace lo mismo
document.getElementById('btnAgregarEtapasSel')?.addEventListener('click', (e)=>{
  e.preventDefault(); applyCatalogAndAdvance();
});

// “Siguiente” en Paso 1 también aplica + avanza
document.getElementById('wizardBtnSiguiente')?.addEventListener('click', (e)=>{
  if(window.wizardPasoActual === 1){ e.preventDefault(); applyCatalogAndAdvance(); }
});

// Habilitar “Siguiente” al abrir el modal
document.getElementById('wizardModal')?.addEventListener('shown.bs.modal', ()=>{
  document.getElementById('wizardBtnSiguiente')?.removeAttribute('disabled');
});


Dentro de applyCatalogAndAdvance(), cuando termina ok, debe llamar a gotoPaso(2) (que ahora está aliaseado a la función correcta).

4) Mensaje rojo legacy

El texto “Primero debes agregar etapas del catálogo…” es estático.

Eliminalo del template o escondelo al iniciar el Paso 1:

document.getElementById('wizardPaso1Warning')?.closest('.text-danger')?.classList?.add('d-none');


Los errores reales se muestran solo setenado #wizardPaso1Warning.textContent.

5) QA de aceptación

Tildar 1–2 etapas → avanza solo al Paso 2.

“Siguiente” en Paso 1 hace bulk + preview + avanza.

Si backend falla, ver Error: <mensaje> (no “undefined”).

Controles se deshabilitan solo mientras corre la request.

window.WIZARD.etapa_ids = array de IDs numéricos de etapas de la obra.