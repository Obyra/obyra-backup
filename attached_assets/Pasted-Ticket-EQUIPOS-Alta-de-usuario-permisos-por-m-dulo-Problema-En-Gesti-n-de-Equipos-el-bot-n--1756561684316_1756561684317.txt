Ticket – EQUIPOS: Alta de usuario + permisos por módulo
Problema

En Gestión de Equipos, el botón “+ Nuevo usuario” no abre el formulario de alta / no permite crear el usuario.

Necesitamos que, al invitar, se puedan definir permisos limitados por módulo (RBAC básico).

Cambios solicitados (exactos)
1) Enlace del botón “+ Nuevo usuario”

Archivo: templates/equipos/usuarios_admin.html (o usuarios_lista.html, el que muestra la lista)
Asegurar que el botón apunte a la ruta canónica:

<a class="btn btn-primary" href="{{ url_for('equipos.usuarios_nuevo') }}">+ Nuevo usuario</a>


Si estaba apuntando a auth.register u otra ruta, reemplazarlo por equipos.usuarios_nuevo.

2) Ruta canónica de alta (GET/POST)

Archivo: equipos.py (blueprint de equipos)

@equipos_bp.route("/equipos/usuarios/nuevo", methods=["GET", "POST"])
@login_required
def usuarios_nuevo():
    if request.method == "GET":
        # Cargar permisos por rol seleccionado (default 'operario')
        role = request.args.get("role", "operario")
        role_perms = RoleModule.query.filter_by(role=role).all()  # ver punto 3
        return render_template("equipos/invitar.html", role=role, role_perms=role_perms)

    # POST: crear usuario e invitar
    email = request.form.get("email")
    role  = request.form.get("role")
    customize = request.form.get("customize") == "on"

    if not email or not role:
        flash("Email y Rol son obligatorios.", "danger")
        return redirect(url_for("equipos.usuarios_nuevo"))

    # Crear usuario invitado
    user = Usuario.create_invited(
        email=email,
        role=role,
        company_id=current_user.company_id
    )

    # Overrides de módulos (opcional)
    if customize:
        # Esperamos checkboxes tipo modules[obras][view]=on / modules[obras][edit]=on
        for module in ["obras","presupuestos","equipos","inventario","marketplaces","reportes","documentos"]:
            view = bool(request.form.get(f"modules[{module}][view]"))
            edit = bool(request.form.get(f"modules[{module}][edit]"))
            upsert_user_module(user.id, module, view, edit)  # helper: inserta/actualiza

    # Generar link de invitación (como hoy) y mostrarlo en la vista
    flash("Usuario creado", "success")
    return redirect(url_for("equipos.usuarios_lista"))


Asegurarse de tener importados login_required, flash, redirect, url_for y de no redirigir al dashboard en el GET.

3) Permisos por módulo (RBAC básico)
3.1 Tablas

role_modules(role, module, can_view bool, can_edit bool) – seed con defaults por rol.

user_modules(user_id, module, can_view bool, can_edit bool) – opcional, para overrides por usuario.

3.2 Helpers
def get_allowed_modules(user):
    role_map = {rm.module: {"view": rm.can_view, "edit": rm.can_edit}
                for rm in RoleModule.query.filter_by(role=user.role)}
    # Overrides de usuario
    for um in UserModule.query.filter_by(user_id=user.id):
        role_map[um.module] = {"view": um.can_view, "edit": um.can_edit}
    return role_map

def upsert_user_module(user_id, module, view, edit):
    um = UserModule.query.filter_by(user_id=user_id, module=module).first()
    if not um:
        um = UserModule(user_id=user_id, module=module)
        db.session.add(um)
    um.can_view, um.can_edit = view, edit
    db.session.commit()


Los menús y vistas deberán consultar current_user.can('mod','view|edit') (si ya existe, reutilizar).

4) Formulario de invitación (vista)

Archivo: templates/equipos/invitar.html

Campos: Email, Rol, bloque “Acceso a módulos”.
Respetar CSRF si usan WTForms ({{ form.csrf_token }}) o {{ csrf_token() }}.

<form method="POST" action="{{ url_for('equipos.usuarios_nuevo') }}">
  {{ csrf_token() }}

  <label>Email del Usuario</label>
  <input type="email" name="email" required class="form-control"/>

  <label>Rol Asignado</label>
  <select name="role" class="form-select">
    <option value="operario">Operario</option>
    <option value="jefe_obra">Jefe de Obra</option>
    <option value="compras">Compras</option>
    <option value="admin_empresa">Administrador</option>
    <!-- etc -->
  </select>

  <div class="form-check mt-3">
    <input class="form-check-input" type="checkbox" id="customize" name="customize">
    <label class="form-check-label" for="customize">Personalizar acceso para este usuario</label>
  </div>

  <div id="modules-grid" class="mt-3" style="display:none;">
    <table class="table">
      <thead><tr><th>Módulo</th><th>Ver</th><th>Editar</th></tr></thead>
      <tbody>
        {% for m in ["obras","presupuestos","equipos","inventario","marketplaces","reportes","documentos"] %}
        {% set rp = (role_perms | selectattr('module','equalto',m) | list | first) %}
        <tr>
          <td>{{ m|capitalize }}</td>
          <td>
            <input type="checkbox" name="modules[{{m}}][view]"
                   {% if rp and rp.can_view %}checked{% endif %}>
          </td>
          <td>
            <input type="checkbox" name="modules[{{m}}][edit]"
                   {% if rp and rp.can_edit %}checked{% endif %}>
          </td>
        </tr>
        {% endfor %}
      </tbody>
    </table>
  </div>

  <button class="btn btn-primary">Enviar invitación</button>
</form>

<script>
document.getElementById('customize').addEventListener('change', function(){
  document.getElementById('modules-grid').style.display = this.checked ? 'block':'none';
});
</script>


Comportamiento:

Si “Personalizar” está apagado → NO se crean user_modules; se usan los permisos del rol.

Si está encendido → se guardan los overrides en user_modules.

5) Aceptación (QA)

 En Gestión de Equipos existe el botón “+ Nuevo usuario” y abre /equipos/usuarios/nuevo.

 El GET de /equipos/usuarios/nuevo no redirige al dashboard; muestra el formulario.

 Completar y enviar crea el usuario y vuelve a /equipos/usuarios con toast “Usuario creado”.

 Si no personalizo, el usuario queda con permisos del rol.

 Si personalizo, se guardan overrides y la UI/menú solo muestra lo permitido; URLs bloquean con 403 si no tiene acceso.