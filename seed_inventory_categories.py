#!/usr/bin/env python3
"""Seed de categor√≠as de inventario predefinidas.

Este script crea una estructura jer√°rquica completa de categor√≠as para el
m√≥dulo de inventario a fin de que los usuarios cuenten con un cat√°logo listo
al dar de alta √≠tems nuevos. Puede ejecutarse m√∫ltiples veces sin duplicar
registros.
"""

from __future__ import annotations

import argparse
import sys
from collections import defaultdict
from typing import Dict, List, Optional, Tuple

from extensions import db
from models import InventoryCategory, Organizacion
from sqlalchemy import func

DEFAULT_CATEGORY_TREE: List[Dict[str, object]] = [
    {
        "nombre": "Materiales",
        "children": [
            {"nombre": "Cementos y aglomerantes"},
            {"nombre": "√Åridos"},
            {"nombre": "Aceros y armaduras"},
            {"nombre": "Aditivos y qu√≠micos para hormig√≥n"},
            {"nombre": "Maderas y tableros"},
            {"nombre": "Pl√°sticos y PVC"},
            {"nombre": "Pinturas y revestimientos"},
            {"nombre": "Impermeabilizaci√≥n y selladores"},
        ],
    },
    {
        "nombre": "Sistemas de Encofrado",
        "children": [
            {"nombre": "Vigas H20 (Peri/H√ºnnebeck compatibles)"},
            {"nombre": "Puntales met√°licos"},
            {"nombre": "Barras/Tuercas DW (Dywidag)"},
            {"nombre": "Paneles y chapas"},
            {"nombre": "Accesorios de encofrado"},
            {"nombre": "Tornapuntas y estabilizadores"},
        ],
    },
    {
        "nombre": "Herramientas",
        "children": [
            {"nombre": "Manuales"},
            {"nombre": "El√©ctricas"},
            {"nombre": "Medici√≥n y trazado"},
            {"nombre": "Corte"},
            {"nombre": "Fijaci√≥n"},
            {"nombre": "Neum√°ticas"},
        ],
    },
    {
        "nombre": "Maquinarias",
        "children": [
            {"nombre": "Andamios y plataformas"},
            {"nombre": "Excavadoras"},
            {"nombre": "Retroexcavadoras"},
            {"nombre": "Autoelevadores"},
            {"nombre": "Plumas y gr√∫as"},
            {"nombre": "Hormigoneras y bombeo"},
        ],
    },
    {
        "nombre": "Seguridad",
        "children": [
            {"nombre": "Elementos de protecci√≥n personal (EPP)"},
            {"nombre": "Se√±alizaci√≥n"},
            {"nombre": "Per√≠metro y cerramientos"},
            {"nombre": "Trabajo en altura"},
            {"nombre": "Control de acceso"},
        ],
    },
    {
        "nombre": "Consumibles",
        "children": [
            {"nombre": "Discos de corte y desbaste"},
            {"nombre": "Brocas"},
            {"nombre": "Tornillos"},
            {"nombre": "Clavos y fijaciones"},
            {"nombre": "Qu√≠micos y adhesivos"},
            {"nombre": "Lubricantes y grasas"},
        ],
    },
    {
        "nombre": "Log√≠stica y Dep√≥sitos",
        "children": [
            {"nombre": "Transporte interno"},
            {"nombre": "Equipamiento de dep√≥sito"},
            {"nombre": "Embalajes y contenedores"},
            {"nombre": "Sistemas de inventario"},
        ],
    },
    {
        "nombre": "Oficina e IT",
        "children": [
            {"nombre": "Computadoras y perif√©ricos"},
            {"nombre": "Redes y comunicaci√≥n"},
            {"nombre": "Impresi√≥n y planos"},
            {"nombre": "Software y licencias"},
        ],
    },
    {
        "nombre": "Categor√≠as transversales KPI",
        "children": [
            {"nombre": "Desperdicio"},
            {"nombre": "Merma"},
            {"nombre": "Reproceso"},
            {"nombre": "Eficiencia operativa"},
        ],
    },
]

def _get_or_create_category(
    *,
    company_id: int,
    nombre: str,
    parent: Optional[InventoryCategory],
    sort_order: int,
    mark_global: bool = False,
) -> Tuple[InventoryCategory, str]:
    """Obtiene o crea una categor√≠a para la organizaci√≥n dada."""

    filters = [
        InventoryCategory.nombre == nombre,
        InventoryCategory.parent_id == (parent.id if parent else None),
    ]

    if mark_global:
        filters.append(InventoryCategory.is_global.is_(True))
    else:
        filters.append(InventoryCategory.company_id == company_id)

    existing = InventoryCategory.query.filter(*filters).first()

    if existing:
        status = 'existing'
        if not getattr(existing, 'is_active', True):
            existing.is_active = True
            status = 'reactivated'

        if mark_global and not getattr(existing, 'is_global', False):
            existing.is_global = True

        if getattr(existing, 'sort_order', sort_order) != sort_order:
            existing.sort_order = sort_order

        return existing, status

    categoria = InventoryCategory(
        company_id=company_id,
        nombre=nombre,
        parent_id=parent.id if parent else None,
        sort_order=sort_order,
        is_active=True,
        is_global=mark_global,
    )
    db.session.add(categoria)
    db.session.flush()
    return categoria, 'created'


def _seed_category_branch(
    company_id: int,
    data: Dict[str, object],
    parent: Optional[InventoryCategory] = None,
    *,
    depth: int = 0,
    position: int = 0,
    path: str = "",
    stats: Optional[Dict[str, int]] = None,
    verbose: bool = False,
    mark_global: bool = False,
) -> int:
    if stats is None:
        stats = defaultdict(int)

    categoria, status = _get_or_create_category(
        company_id=company_id,
        nombre=data["nombre"],
        parent=parent,
        sort_order=position,
        mark_global=mark_global,
    )

    stats[status] = stats.get(status, 0) + 1

    separator = " \u2192 " if path else ""
    current_path = f"{path}{separator}{categoria.nombre}".strip()
    if verbose:
        indent = "  " * depth
        print(f"{indent}- {current_path} [{status}]")

    total_created = 1 if status == 'created' else 0
    for idx, child in enumerate(data.get("children", []) or []):
        total_created += _seed_category_branch(
            company_id,
            child,
            categoria,
            depth=depth + 1,
            position=idx,
            path=current_path,
            stats=stats,
            verbose=verbose,
            mark_global=mark_global,
        )
    return total_created


def seed_inventory_categories_for_company(
    company: Organizacion,
    *,
    verbose: bool = False,
    mark_global: bool = False,
) -> Dict[str, int]:
    """Crea la estructura completa de categor√≠as para la organizaci√≥n dada."""

    stats: Dict[str, int] = defaultdict(int)
    for index, categoria in enumerate(DEFAULT_CATEGORY_TREE):
        _seed_category_branch(
            company.id,
            categoria,
            position=index,
            stats=stats,
            verbose=verbose,
            mark_global=mark_global,
        )

    # Aseguramos que todas las claves existan aunque no se hayan utilizado
    for key in ("created", "existing", "reactivated"):
        stats.setdefault(key, 0)

    return dict(stats)


def seed_inventory_categories_for_all(*, verbose: bool = False) -> Dict[int, Dict[str, int]]:
    """Genera las categor√≠as para todas las organizaciones registradas."""

    organizaciones = Organizacion.query.all()
    if not organizaciones:
        print("‚ùå No se encontraron organizaciones. Crea una antes de correr el seed.")
        return {}

    resultados: Dict[int, Dict[str, int]] = {}
    for organizacion in organizaciones:
        stats = seed_inventory_categories_for_company(organizacion, verbose=verbose)
        resultados[organizacion.id] = stats
        if verbose:
            print(
                "\nüìÇ Resumen:",
                f"creadas={stats['created']}",
                f"existentes={stats['existing']}",
                f"reactivadas={stats['reactivated']}",
            )

    db.session.commit()

    return resultados


def _resolve_organization(identifier: str) -> Optional[Organizacion]:
    """Obtiene una organizaci√≥n por id, slug o nombre."""

    identifier = identifier.strip()
    if identifier.isdigit():
        return Organizacion.query.get(int(identifier))

    if hasattr(Organizacion, 'slug'):
        org = Organizacion.query.filter_by(slug=identifier).first()
        if org:
            return org

    by_token = Organizacion.query.filter_by(token_invitacion=identifier).first()
    if by_token:
        return by_token

    lowered = identifier.lower()
    return (
        Organizacion.query
        .filter(func.lower(Organizacion.nombre) == lowered)
        .first()
    )


def _print_seed_summary(nombre: str, stats: Dict[str, int]) -> None:
    """Imprime un resumen compacto del seed para una organizaci√≥n."""

    created = stats.get('created', 0)
    existing = stats.get('existing', 0)
    reactivated = stats.get('reactivated', 0)
    print(
        f"üèóÔ∏è  {nombre}: created={created}, existing={existing}, reactivated={reactivated}"
    )


def main(argv: Optional[List[str]] = None) -> int:
    """Punto de entrada CLI."""

    parser = argparse.ArgumentParser(description='Seed de categor√≠as de inventario')
    parser.add_argument(
        '--global',
        dest='seed_global',
        action='store_true',
        help='Sembrar el cat√°logo global compartido',
    )
    parser.add_argument(
        '--org',
        dest='orgs',
        action='append',
        help='ID, slug, token o nombre de la organizaci√≥n destino (puede repetirse)',
    )
    parser.add_argument('--quiet', action='store_true', help='Oculta el detalle por categor√≠a')

    args = parser.parse_args(argv)

    verbose = not args.quiet
    org_identifiers = args.orgs or []
    should_seed_global = args.seed_global or not org_identifiers
    fallback_identifier = org_identifiers[0] if (args.seed_global and org_identifiers) else None

    from app import app

    with app.app_context():
        if should_seed_global:
            fallback_org: Optional[Organizacion]
            if fallback_identifier:
                fallback_org = _resolve_organization(fallback_identifier)
                if not fallback_org:
                    print(f"‚ùå No se encontr√≥ la organizaci√≥n '{fallback_identifier}' para el cat√°logo global.")
                    return 1
            else:
                fallback_org = Organizacion.query.order_by(Organizacion.id.asc()).first()
                if not fallback_org:
                    print('‚ùå No se encontraron organizaciones. Crea una antes de sembrar el cat√°logo global.')
                    return 1

            stats = seed_inventory_categories_for_company(
                fallback_org,
                verbose=verbose,
                mark_global=True,
            )
            db.session.commit()

            if verbose:
                print('\nüåê Cat√°logo global inicializado:')
            _print_seed_summary(fallback_org.nombre if fallback_org else 'Global', stats)

        exit_code = 0
        for identifier in org_identifiers:
            organizacion = _resolve_organization(identifier)
            if not organizacion:
                print(f"‚ùå No se encontr√≥ la organizaci√≥n '{identifier}'.")
                exit_code = 1
                continue

            stats = seed_inventory_categories_for_company(organizacion, verbose=verbose)
            db.session.commit()

            if verbose:
                print('\nüìÇ Resumen final:')
            _print_seed_summary(organizacion.nombre, stats)

        return exit_code


if __name__ == "__main__":
    sys.exit(main())
